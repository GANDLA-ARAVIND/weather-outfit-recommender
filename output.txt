

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components ===
[Error reading file]: [Errno 13] Permission denied: 'C:\\Users\\Dell\\Downloads\\project-bolt-sb1-dbc7xrpk (1)\\project\\src\\components'

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\ActivitySuggestions.tsx ===
import React from 'react';
import { Activity } from 'lucide-react';
import { useTranslation } from '../hooks/useTranslation';

interface ActivitySuggestionsProps {
  weather: any;
  isCelsius: boolean;
}

const ActivitySuggestions: React.FC<ActivitySuggestionsProps> = ({ weather, isCelsius }) => {
  const { t } = useTranslation();

  const generateActivities = () => {
    const temp = weather.temperature;
    const condition = weather.condition.toLowerCase();
    
    let activities = [];
    
    if (condition.includes('rain')) {
      activities = [
        { name: 'Indoor Workout', icon: 'üèãÔ∏è' },
        { name: 'Museum Visit', icon: 'üèõÔ∏è' },
        { name: 'Coffee Shop Work', icon: '‚òï' },
        { name: 'Movie Theater', icon: 'üé¨' }
      ];
    } else if (temp >= 30) {
      activities = [
        { name: 'Outdoor Picnic', icon: 'üß∫' },
        { name: 'Swimming', icon: 'üèä' },
        { name: 'Hiking', icon: 'ü•æ' }
      ];
    } else if (temp >= 15) {
      activities = [
        { name: 'City Walking Tour', icon: 'üö∂' },
        { name: 'Outdoor Market', icon: 'üõí' },
        { name: 'Photography Walk', icon: 'üì∏' },
        { name: 'Bike Ride', icon: 'üö¥' }
      ];
    } else {
      activities = [
        { name: 'Hot Chocolate Caf√©', icon: '‚òï' },
        { name: 'Indoor Shopping', icon: 'üõçÔ∏è' },
        { name: 'Cozy Reading', icon: 'üìö' }
      ];
    }
    
    return activities.slice(0, 3); // Show top 3 activities
  };

  const activities = generateActivities();

  return (
    <div className="w-full max-w-md mx-auto animate-fade-in">
      <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-gray-200 dark:border-gray-700">
        <h3 className="text-xl font-bold text-gray-900 dark:text-white mb-4 flex items-center gap-2">
          <Activity className="w-6 h-6 text-green-500" />
          {t('suggestedActivities')}
        </h3>

        <div className="space-y-3">
          {activities.map((activity, index) => (
            <div
              key={index}
              className="p-4 bg-gradient-to-r from-green-50 to-teal-50 dark:from-gray-700 dark:to-gray-600 rounded-xl border border-green-100 dark:border-gray-600"
            >
              <div className="flex items-start gap-3">
                <span className="text-2xl">{activity.icon}</span>
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 dark:text-white mb-1">
                    {activity.name}
                  </h4>
                </div>
              </div>
            </div>
          ))}
        </div>

        <div className="mt-4 p-3 bg-blue-50 dark:bg-gray-700 rounded-xl">
          <p className="text-sm text-gray-700 dark:text-gray-300">
            üí° <span className="font-medium">Tip:</span> {t('activitiesTip')} {weather.city}.
          </p>
        </div>
      </div>
    </div>
  );
};

export default ActivitySuggestions;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\CityInputForm.tsx ===
import React, { useState } from 'react';
import { Search, MapPin, Loader2 } from 'lucide-react';
import { useTranslation } from '../hooks/useTranslation';

interface CityInputFormProps {
  onCitySubmit: (city: string) => void;
  onLocationRequest: () => void;
  isLoading: boolean;
  error: string;
}

const CityInputForm: React.FC<CityInputFormProps> = ({
  onCitySubmit,
  onLocationRequest,
  isLoading,
  error
}) => {
  const [city, setCity] = useState('');
  const { t } = useTranslation();

  const handleSubmit = () => {
    if (city.trim()) {
      onCitySubmit(city.trim());
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSubmit();
    }
  };

  return (
    <div className="w-full max-w-md mx-auto p-4 sm:p-6">
      <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-4 sm:p-6 border border-gray-200 dark:border-gray-700">
        <div className="space-y-3 sm:space-y-4">
          <div className="relative">
            <input
              type="text"
              value={city}
              onChange={(e) => setCity(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={t('enterCity')}
              className="w-full px-4 py-3 pr-12 text-gray-900 dark:text-white bg-gray-50 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200 text-base"
              disabled={isLoading}
            />
            <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
          </div>
          
          <div className="flex gap-3">
            <button
              onClick={handleSubmit}
              disabled={isLoading || !city.trim()}
              className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-blue-500 hover:bg-blue-600 disabled:bg-gray-400 text-white rounded-xl font-medium transition-all duration-200 transform hover:scale-105 disabled:scale-100 touch-target"
            >
              {isLoading ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                <Search className="w-5 h-5" />
              )}
              <span className="hidden sm:inline">{t('getWeather')}</span>
              <span className="sm:hidden">Weather</span>
            </button>
            
            <button
              onClick={onLocationRequest}
              disabled={isLoading}
              className="px-4 py-3 bg-teal-500 hover:bg-teal-600 disabled:bg-gray-400 text-white rounded-xl transition-all duration-200 transform hover:scale-105 disabled:scale-100 touch-target"
              aria-label={t('useLocation')}
            >
              <MapPin className="w-5 h-5" />
            </button>
          </div>
          
          {error && (
            <div className="p-3 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300 rounded-xl text-sm break-words">
              {error}
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CityInputForm;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\Footer.tsx ===
import React from 'react';
import { ExternalLink, Github } from 'lucide-react';
import SocialShare from './SocialShare';

interface FooterProps {
  weather?: any;
  outfit?: string;
  isCelsius?: boolean;
}

const Footer: React.FC<FooterProps> = ({ weather, outfit, isCelsius = true }) => {
  return (
    <footer className="mt-12 pb-8">
      <div className="max-w-4xl mx-auto px-4">
        {weather && outfit && (
          <div className="text-center mb-6">
            <SocialShare weather={weather} outfit={outfit} isCelsius={isCelsius} />
          </div>
        )}
        
        <div className="text-center space-y-3">
          <p className="text-sm text-gray-600 dark:text-gray-400">
            Powered by{' '}
            <a
              href="https://openweathermap.org"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-500 hover:text-blue-600 inline-flex items-center gap-1"
            >
              OpenWeatherMap
              <ExternalLink className="w-3 h-3" />
            </a>
            {' '}and{' '}
            <a
              href="https://openai.com"
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-500 hover:text-blue-600 inline-flex items-center gap-1"
            >
              OpenAI
              <ExternalLink className="w-3 h-3" />
            </a>
          </p>
          
          <div className="flex justify-center items-center gap-4">
            <span className="text-sm text-gray-600 dark:text-gray-400">
              GANDLA ARAVIND
            </span>
            <a
              href="https://github.com/GANDLA-ARAVIND"
              target="_blank"
              rel="noopener noreferrer"
              className="text-gray-600 dark:text-gray-400 hover:text-blue-500 transition-colors duration-200"
              aria-label="GitHub Profile"
            >
              <Github className="w-5 h-5" />
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
};

export default Footer;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\Header.tsx ===
import React from 'react';
import { Sun, Moon } from 'lucide-react';
import { useTranslation } from '../hooks/useTranslation';

interface HeaderProps {
  isDarkMode: boolean;
  toggleDarkMode: () => void;
}

const Header: React.FC<HeaderProps> = ({ isDarkMode, toggleDarkMode }) => {
  const { t } = useTranslation();

  return (
    <header className="sticky top-0 z-10 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700">
      <div className="max-w-4xl mx-auto px-4 py-4 flex justify-between items-center">
        <h1 className="text-xl md:text-2xl font-bold text-gray-900 dark:text-white">
          {t('appTitle')}
        </h1>
        <button
          onClick={toggleDarkMode}
          className="p-2 rounded-lg bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors duration-200"
          aria-label={isDarkMode ? 'Switch to light mode' : 'Switch to dark mode'}
        >
          {isDarkMode ? (
            <Sun className="w-5 h-5 text-yellow-500" />
          ) : (
            <Moon className="w-5 h-5 text-gray-600" />
          )}
        </button>
      </div>
    </header>
  );
};

export default Header;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\OutfitRecommendation.tsx ===
import React, { useState } from 'react';
import { Volume2, VolumeX, Shirt, Sparkles } from 'lucide-react';
import { WardrobeItem } from '../hooks/useWardrobe';
import { useTranslation } from '../hooks/useTranslation';

interface OutfitRecommendationProps {
  weather: any;
  isCelsius: boolean;
  preferences?: any;
  wardrobeItems?: WardrobeItem[];
  onManageWardrobe?: () => void;
}

const OutfitRecommendation: React.FC<OutfitRecommendationProps> = ({
  weather,
  isCelsius,
  preferences,
  wardrobeItems = [],
  onManageWardrobe
}) => {
  const [isSpeaking, setIsSpeaking] = useState(false);
  const { t } = useTranslation();

  const generateGenericOutfit = () => {
    const temp = weather.temperature;
    const condition = weather.condition.toLowerCase();
    const styles = preferences?.clothingStyles || ['casual'];
    
    let outfit = '';
    
    // Base outfit recommendation
    if (temp <= 5) {
      outfit = 'Wear a heavy winter coat, warm layers, gloves, and a hat. Consider thermal underwear for extra warmth.';
    } else if (temp <= 15) {
      outfit = 'A warm jacket or hoodie with jeans would be perfect. Don\'t forget a scarf!';
    } else if (temp <= 25) {
      outfit = 'A light sweater or long-sleeve shirt with comfortable pants would be ideal.';
    } else {
      outfit = 'Light clothing like a t-shirt and shorts would be comfortable. Consider breathable fabrics.';
    }
    
    // Add style preferences
    if (styles.includes('formal')) {
      outfit = outfit.replace('hoodie', 'blazer').replace('t-shirt', 'dress shirt');
    } else if (styles.includes('athletic')) {
      outfit += ' Consider moisture-wicking athletic wear for comfort.';
    }
    
    if (condition.includes('rain')) {
      outfit += ' Bring an umbrella or wear a waterproof jacket!';
    }
    if (condition.includes('wind')) {
      outfit += ' Consider a windproof layer.';
    }
    
    return outfit;
  };

  const generateWardrobeOutfit = () => {
    if (wardrobeItems.length === 0) return null;

    const temp = weather.temperature;
    const condition = weather.condition.toLowerCase();
    
    // Filter items by weather suitability
    const suitableItems = wardrobeItems.filter(item => {
      if (!item.weatherSuitability) return true;
      
      const suitability = item.weatherSuitability.toLowerCase();
      
      if (temp <= 5 && (suitability.includes('cold') || suitability.includes('all weather'))) return true;
      if (temp > 5 && temp <= 15 && (suitability.includes('cool') || suitability.includes('all weather'))) return true;
      if (temp > 15 && temp <= 25 && (suitability.includes('warm') || suitability.includes('all weather'))) return true;
      if (temp > 25 && (suitability.includes('hot') || suitability.includes('all weather'))) return true;
      
      if (condition.includes('rain') && (suitability.includes('rainy') || suitability.includes('all weather'))) return true;
      if (condition.includes('wind') && (suitability.includes('windy') || suitability.includes('all weather'))) return true;
      
      return false;
    });

    if (suitableItems.length === 0) return null;

    const categories = {
      top: suitableItems.filter(item => item.category === 'Top'),
      bottom: suitableItems.filter(item => item.category === 'Bottom'),
      outerwear: suitableItems.filter(item => item.category === 'Outerwear'),
      footwear: suitableItems.filter(item => item.category === 'Footwear')
    };

    const outfit = [];
    if (categories.top.length > 0) outfit.push(categories.top[0]);
    if (categories.bottom.length > 0) outfit.push(categories.bottom[0]);
    if (temp <= 20 && categories.outerwear.length > 0) outfit.push(categories.outerwear[0]);
    if (categories.footwear.length > 0) outfit.push(categories.footwear[0]);

    return outfit.map(item => 
      `Your ${item.color ? item.color.toLowerCase() + ' ' : ''}${item.name.toLowerCase()}`
    ).join(', ');
  };

  const handleSpeech = () => {
    if (isSpeaking) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    } else {
      const displayTemp = isCelsius 
        ? `${Math.round(weather.temperature)} degrees Celsius`
        : `${Math.round((weather.temperature * 9/5) + 32)} degrees Fahrenheit`;
      
      const genericOutfit = generateGenericOutfit();
      const text = `Current weather in ${weather.city}: ${displayTemp}, ${weather.condition}. ${genericOutfit}`;
      
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.onend = () => setIsSpeaking(false);
      utterance.onerror = () => setIsSpeaking(false);
      
      window.speechSynthesis.speak(utterance);
      setIsSpeaking(true);
    }
  };

  const wardrobeOutfit = generateWardrobeOutfit();

  return (
    <div className="w-full max-w-md mx-auto animate-fade-in">
      <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-6 border border-gray-200 dark:border-gray-700">
        <div className="flex items-center mb-4">
          <h3 className="text-xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
            <Shirt className="w-6 h-6 text-blue-500" />
            {t('outfitRecommendation')}
          </h3>
          {onManageWardrobe && (
            <button
              onClick={onManageWardrobe}
              className="px-3 py-1 text-sm bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-colors duration-200"
            >
              {t('manageWardrobe')}
            </button>
          )}
        </div>

        {/* Generic Outfit Recommendation */}
        <div className="space-y-4 mb-4">
          <div className="bg-gradient-to-r from-blue-50 to-teal-50 dark:from-gray-700 dark:to-gray-600 rounded-xl p-4">
            <h4 className="font-semibold text-gray-900 dark:text-white mb-2 flex items-center gap-2">
              <Sparkles className="w-4 h-4 text-yellow-500" />
              {t('generalSuggestion')}
            </h4>
            <p className="text-gray-800 dark:text-gray-200 leading-relaxed">
              {generateGenericOutfit()}
            </p>
          </div>

          {/* MyWardrobe Outfit Recommendation */}
          {wardrobeOutfit ? (
            <div className="bg-gradient-to-r from-purple-50 to-pink-50 dark:from-purple-900/20 dark:to-pink-900/20 rounded-xl p-4">
              <h4 className="font-semibold text-gray-900 dark:text-white mb-2 flex items-center gap-2">
                <Shirt className="w-4 h-4 text-purple-500" />
                {t('fromWardrobe')}
              </h4>
              <p className="text-gray-800 dark:text-gray-200 leading-relaxed">
                {wardrobeOutfit}
              </p>
            </div>
          ) : wardrobeItems.length > 0 ? (
            <div className="bg-yellow-50 dark:bg-yellow-900/20 rounded-xl p-4">
              <p className="text-yellow-800 dark:text-yellow-200 text-sm">
                {t('noSuitableItems')}
              </p>
            </div>
          ) : null}
        </div>

        <div>
          <button
            onClick={handleSpeech}
            className={`w-full flex items-center justify-center gap-2 px-4 py-3 rounded-xl font-medium transition-all duration-200 transform hover:scale-105 ${
              isSpeaking
                ? 'bg-red-500 hover:bg-red-600 text-white'
                : 'bg-green-500 hover:bg-green-600 text-white'
            }`}
          >
            {isSpeaking ? (
              <>
                <VolumeX className="w-5 h-5" />
                Stop Speaking
              </>
            ) : (
              <>
                <Volume2 className="w-5 h-5" />
                {t('speakRecommendation')}
              </>
            )}
          </button>
        </div>
      </div>
    </div>
  );
};

export default OutfitRecommendation;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\SocialShare.tsx ===
import React, { useState } from 'react';
import { Share2, Twitter, Facebook, Copy, Check } from 'lucide-react';

interface SocialShareProps {
  weather: any;
  outfit: string;
  isCelsius: boolean;
}

const SocialShare: React.FC<SocialShareProps> = ({ weather, outfit, isCelsius }) => {
  const [copied, setCopied] = useState(false);
  const [showOptions, setShowOptions] = useState(false);

  const displayTemp = isCelsius 
    ? `${Math.round(weather.temperature)}¬∞C`
    : `${Math.round((weather.temperature * 9/5) + 32)}¬∞F`;

  const shareText = `Weather in ${weather.city}: ${displayTemp}, ${weather.condition}. ${outfit} #SmartWeather #OutfitRecommendation`;
  const shareUrl = window.location.href;

  const handleNativeShare = async () => {
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'Smart Weather + Outfit Recommendation',
          text: shareText,
          url: shareUrl
        });
      } catch (error) {
        console.log('Error sharing:', error);
        setShowOptions(true);
      }
    } else {
      setShowOptions(true);
    }
  };

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(`${shareText}\n\n${shareUrl}`);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.log('Error copying:', error);
    }
  };

  const handleTwitterShare = () => {
    const twitterUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(shareText)}&url=${encodeURIComponent(shareUrl)}`;
    window.open(twitterUrl, '_blank', 'width=550,height=420');
  };

  const handleFacebookShare = () => {
    const facebookUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}&quote=${encodeURIComponent(shareText)}`;
    window.open(facebookUrl, '_blank', 'width=550,height=420');
  };

  return (
    <div className="relative">
      <button
        onClick={handleNativeShare}
        className="flex items-center gap-2 px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white rounded-lg transition-all duration-200 transform hover:scale-105"
      >
        <Share2 className="w-4 h-4" />
        Share Weather
      </button>

      {showOptions && (
        <div className="absolute bottom-full left-0 mb-2 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 p-2 min-w-[200px] z-10">
          <div className="space-y-1">
            <button
              onClick={handleTwitterShare}
              className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
            >
              <Twitter className="w-4 h-4 text-blue-400" />
              <span className="text-gray-900 dark:text-white">Share on Twitter</span>
            </button>
            
            <button
              onClick={handleFacebookShare}
              className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
            >
              <Facebook className="w-4 h-4 text-blue-600" />
              <span className="text-gray-900 dark:text-white">Share on Facebook</span>
            </button>
            
            <button
              onClick={handleCopyLink}
              className="w-full flex items-center gap-3 px-3 py-2 text-left hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
            >
              {copied ? (
                <Check className="w-4 h-4 text-green-500" />
              ) : (
                <Copy className="w-4 h-4 text-gray-500" />
              )}
              <span className="text-gray-900 dark:text-white">
                {copied ? 'Copied!' : 'Copy Link'}
              </span>
            </button>
          </div>
          
          <button
            onClick={() => setShowOptions(false)}
            className="absolute -top-2 -right-2 w-6 h-6 bg-gray-200 dark:bg-gray-600 rounded-full flex items-center justify-center text-gray-500 hover:bg-gray-300 dark:hover:bg-gray-500 transition-colors duration-200"
          >
            √ó
          </button>
        </div>
      )}
    </div>
  );
};

export default SocialShare;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\UserPreferences.tsx ===
import React, { useState, useEffect } from 'react';
import { Settings, X, Save, Shirt, Palette, Globe } from 'lucide-react';

interface UserPreferencesProps {
  isOpen: boolean;
  onClose: () => void;
  preferences: any;
  onSave: (preferences: any) => void;
}

const UserPreferences: React.FC<UserPreferencesProps> = ({
  isOpen,
  onClose,
  preferences,
  onSave
}) => {
  const [localPrefs, setLocalPrefs] = useState(preferences);

  useEffect(() => {
    setLocalPrefs(preferences);
  }, [preferences]);

  const handleSave = () => {
    onSave(localPrefs);
    onClose();
  };

  const clothingStyles = [
    { id: 'casual', label: 'Casual', description: 'Comfortable everyday wear' },
    { id: 'formal', label: 'Formal', description: 'Business and professional attire' },
    { id: 'athletic', label: 'Athletic', description: 'Sportswear and activewear' },
    { id: 'trendy', label: 'Trendy', description: 'Fashion-forward styles' },
    { id: 'minimalist', label: 'Minimalist', description: 'Simple, clean aesthetics' }
  ];

  const themes = [
    { id: 'default', label: 'Default', colors: 'bg-blue-500' },
    { id: 'vibrant', label: 'Vibrant', colors: 'bg-gradient-to-r from-purple-500 to-pink-500' },
    { id: 'nature', label: 'Nature', colors: 'bg-gradient-to-r from-green-500 to-teal-500' },
    { id: 'sunset', label: 'Sunset', colors: 'bg-gradient-to-r from-orange-500 to-red-500' },
    { id: 'minimal', label: 'Minimal', colors: 'bg-gray-500' }
  ];

  const languages = [
    { id: 'en', label: 'English', flag: 'üá∫üá∏' },
    { id: 'es', label: 'Espa√±ol', flag: 'üá™üá∏' },
    { id: 'fr', label: 'Fran√ßais', flag: 'üá´üá∑' },
    { id: 'de', label: 'Deutsch', flag: 'üá©üá™' },
    { id: 'it', label: 'Italiano', flag: 'üáÆüáπ' }
  ];

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-md w-full max-h-[90vh] overflow-y-auto">
        <div className="sticky top-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4 flex items-center justify-between rounded-t-2xl">
          <h2 className="text-xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
            <Settings className="w-6 h-6 text-blue-500" />
            Preferences
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        <div className="p-6 space-y-6">
          {/* Clothing Style Preferences */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2">
              <Shirt className="w-5 h-5 text-blue-500" />
              Clothing Style
            </h3>
            <div className="space-y-2">
              {clothingStyles.map((style) => (
                <label key={style.id} className="flex items-start gap-3 p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={localPrefs.clothingStyles?.includes(style.id) || false}
                    onChange={(e) => {
                      const styles = localPrefs.clothingStyles || [];
                      if (e.target.checked) {
                        setLocalPrefs({
                          ...localPrefs,
                          clothingStyles: [...styles, style.id]
                        });
                      } else {
                        setLocalPrefs({
                          ...localPrefs,
                          clothingStyles: styles.filter((s: string) => s !== style.id)
                        });
                      }
                    }}
                    className="mt-1 rounded border-gray-300 text-blue-500 focus:ring-blue-500"
                  />
                  <div>
                    <p className="font-medium text-gray-900 dark:text-white">{style.label}</p>
                    <p className="text-sm text-gray-600 dark:text-gray-300">{style.description}</p>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* Theme Selection */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2">
              <Palette className="w-5 h-5 text-blue-500" />
              Theme
            </h3>
            <div className="grid grid-cols-2 gap-3">
              {themes.map((theme) => (
                <label key={theme.id} className="cursor-pointer">
                  <input
                    type="radio"
                    name="theme"
                    value={theme.id}
                    checked={localPrefs.theme === theme.id}
                    onChange={(e) => setLocalPrefs({ ...localPrefs, theme: e.target.value })}
                    className="sr-only"
                  />
                  <div className={`p-3 rounded-lg border-2 transition-all duration-200 ${
                    localPrefs.theme === theme.id
                      ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
                      : 'border-gray-200 dark:border-gray-600 hover:border-gray-300'
                  }`}>
                    <div className={`w-full h-8 rounded-lg mb-2 ${theme.colors}`}></div>
                    <p className="text-sm font-medium text-gray-900 dark:text-white text-center">
                      {theme.label}
                    </p>
                  </div>
                </label>
              ))}
            </div>
          </div>

          {/* Language Selection */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3 flex items-center gap-2">
              <Globe className="w-5 h-5 text-blue-500" />
              Language
            </h3>
            <div className="space-y-2">
              {languages.map((lang) => (
                <label key={lang.id} className="flex items-center gap-3 p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer">
                  <input
                    type="radio"
                    name="language"
                    value={lang.id}
                    checked={localPrefs.language === lang.id}
                    onChange={(e) => setLocalPrefs({ ...localPrefs, language: e.target.value })}
                    className="text-blue-500 focus:ring-blue-500"
                  />
                  <span className="text-xl">{lang.flag}</span>
                  <span className="font-medium text-gray-900 dark:text-white">{lang.label}</span>
                </label>
              ))}
            </div>
          </div>

          {/* Wardrobe Items */}
          <div>
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-3">
              My Wardrobe
            </h3>
            <textarea
              value={localPrefs.wardrobeItems || ''}
              onChange={(e) => setLocalPrefs({ ...localPrefs, wardrobeItems: e.target.value })}
              placeholder="List your clothing items (e.g., red jacket, black sneakers, blue jeans...)"
              className="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-white resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              rows={4}
            />
            <p className="text-sm text-gray-600 dark:text-gray-400 mt-2">
              Add your clothing items to get personalized outfit suggestions
            </p>
          </div>
        </div>

        <div className="sticky bottom-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700 p-4 rounded-b-2xl">
          <div className="flex gap-3">
            <button
              onClick={onClose}
              className="flex-1 px-4 py-3 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-xl hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
            >
              Cancel
            </button>
            <button
              onClick={handleSave}
              className="flex-1 flex items-center justify-center gap-2 px-4 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-xl transition-colors duration-200"
            >
              <Save className="w-5 h-5" />
              Save
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UserPreferences;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\WardrobeManager.tsx ===
import React, { useState, useEffect } from 'react';
import { Plus, Edit2, Trash2, X, Save, Shirt } from 'lucide-react';

interface WardrobeItem {
  id: string;
  name: string;
  type: string;
  color: string;
  category: string;
  weatherSuitability?: string;
}

interface WardrobeManagerProps {
  isOpen: boolean;
  onClose: () => void;
  onWardrobeUpdate: (items: WardrobeItem[]) => void;
}

const WardrobeManager: React.FC<WardrobeManagerProps> = ({
  isOpen,
  onClose,
  onWardrobeUpdate
}) => {
  const [wardrobeItems, setWardrobeItems] = useState<WardrobeItem[]>([]);
  const [editingItem, setEditingItem] = useState<WardrobeItem | null>(null);
  const [isAddingNew, setIsAddingNew] = useState(false);
  const [formData, setFormData] = useState({
    name: '',
    type: '',
    color: '',
    category: '',
    weatherSuitability: ''
  });

  const clothingTypes = [
    'T-shirt', 'Shirt', 'Sweater', 'Hoodie', 'Jacket', 'Coat',
    'Jeans', 'Pants', 'Shorts', 'Skirt', 'Dress',
    'Sneakers', 'Boots', 'Sandals', 'Heels',
    'Hat', 'Scarf', 'Gloves', 'Sunglasses'
  ];

  const categories = ['Top', 'Bottom', 'Outerwear', 'Footwear', 'Accessories'];
  const weatherSuitabilities = ['Hot', 'Warm', 'Cool', 'Cold', 'Rainy', 'Windy', 'All Weather'];

  useEffect(() => {
    if (isOpen) {
      loadWardrobeItems();
    }
  }, [isOpen]);

  const loadWardrobeItems = () => {
    const saved = localStorage.getItem('wardrobeItems');
    if (saved) {
      try {
        const items = JSON.parse(saved);
        setWardrobeItems(items);
      } catch (error) {
        console.error('Error loading wardrobe items:', error);
      }
    }
  };

  const saveWardrobeItems = (items: WardrobeItem[]) => {
    localStorage.setItem('wardrobeItems', JSON.stringify(items));
    setWardrobeItems(items);
    onWardrobeUpdate(items);
  };

  const handleAddItem = () => {
    if (!formData.name || !formData.type || !formData.category) return;

    const newItem: WardrobeItem = {
      id: Date.now().toString(),
      name: formData.name,
      type: formData.type,
      color: formData.color,
      category: formData.category,
      weatherSuitability: formData.weatherSuitability || undefined
    };

    const updatedItems = [...wardrobeItems, newItem];
    saveWardrobeItems(updatedItems);
    resetForm();
    setIsAddingNew(false);
  };

  const handleEditItem = (item: WardrobeItem) => {
    setEditingItem(item);
    setFormData({
      name: item.name,
      type: item.type,
      color: item.color,
      category: item.category,
      weatherSuitability: item.weatherSuitability || ''
    });
  };

  const handleUpdateItem = () => {
    if (!editingItem || !formData.name || !formData.type || !formData.category) return;

    const updatedItems = wardrobeItems.map(item =>
      item.id === editingItem.id
        ? {
            ...item,
            name: formData.name,
            type: formData.type,
            color: formData.color,
            category: formData.category,
            weatherSuitability: formData.weatherSuitability || undefined
          }
        : item
    );

    saveWardrobeItems(updatedItems);
    resetForm();
    setEditingItem(null);
  };

  const handleDeleteItem = (id: string) => {
    const updatedItems = wardrobeItems.filter(item => item.id !== id);
    saveWardrobeItems(updatedItems);
  };

  const resetForm = () => {
    setFormData({
      name: '',
      type: '',
      color: '',
      category: '',
      weatherSuitability: ''
    });
  };

  const cancelEdit = () => {
    setEditingItem(null);
    setIsAddingNew(false);
    resetForm();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-hidden">
        <div className="sticky top-0 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 p-4 flex items-center justify-between">
          <h2 className="text-xl font-bold text-gray-900 dark:text-white flex items-center gap-2">
            <Shirt className="w-6 h-6 text-blue-500" />
            Manage MyWardrobe
          </h2>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors duration-200"
          >
            <X className="w-5 h-5 text-gray-500" />
          </button>
        </div>

        <div className="p-6 overflow-y-auto max-h-[calc(90vh-120px)]">
          {/* Add New Item Button */}
          {!isAddingNew && !editingItem && (
            <button
              onClick={() => setIsAddingNew(true)}
              className="w-full mb-6 flex items-center justify-center gap-2 px-4 py-3 bg-blue-500 hover:bg-blue-600 text-white rounded-xl transition-colors duration-200"
            >
              <Plus className="w-5 h-5" />
              Add New Item
            </button>
          )}

          {/* Add/Edit Form */}
          {(isAddingNew || editingItem) && (
            <div className="mb-6 p-4 bg-gray-50 dark:bg-gray-700 rounded-xl">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-4">
                {editingItem ? 'Edit Item' : 'Add New Item'}
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Item Name *
                  </label>
                  <input
                    type="text"
                    value={formData.name}
                    onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                    placeholder="e.g., Blue Denim Jacket"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Type *
                  </label>
                  <select
                    value={formData.type}
                    onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select type</option>
                    {clothingTypes.map(type => (
                      <option key={type} value={type}>{type}</option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Color
                  </label>
                  <input
                    type="text"
                    value={formData.color}
                    onChange={(e) => setFormData({ ...formData, color: e.target.value })}
                    placeholder="e.g., Blue, Red, Black"
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Category *
                  </label>
                  <select
                    value={formData.category}
                    onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select category</option>
                    {categories.map(category => (
                      <option key={category} value={category}>{category}</option>
                    ))}
                  </select>
                </div>

                <div className="md:col-span-2">
                  <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Weather Suitability (Optional)
                  </label>
                  <select
                    value={formData.weatherSuitability}
                    onChange={(e) => setFormData({ ...formData, weatherSuitability: e.target.value })}
                    className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Any weather</option>
                    {weatherSuitabilities.map(weather => (
                      <option key={weather} value={weather}>{weather}</option>
                    ))}
                  </select>
                </div>
              </div>

              <div className="flex gap-3 mt-4">
                <button
                  onClick={editingItem ? handleUpdateItem : handleAddItem}
                  className="flex items-center gap-2 px-4 py-2 bg-green-500 hover:bg-green-600 text-white rounded-lg transition-colors duration-200"
                >
                  <Save className="w-4 h-4" />
                  {editingItem ? 'Update' : 'Add'} Item
                </button>
                <button
                  onClick={cancelEdit}
                  className="px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
                >
                  Cancel
                </button>
              </div>
            </div>
          )}

          {/* Wardrobe Items List */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              Your Wardrobe ({wardrobeItems.length} items)
            </h3>
            
            {wardrobeItems.length === 0 ? (
              <div className="text-center py-8 text-gray-500 dark:text-gray-400">
                <Shirt className="w-12 h-12 mx-auto mb-3 opacity-50" />
                <p>No items in your wardrobe yet.</p>
                <p className="text-sm">Add some items to get personalized outfit suggestions!</p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {wardrobeItems.map((item) => (
                  <div
                    key={item.id}
                    className="p-4 bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-xl"
                  >
                    <div className="flex items-start justify-between mb-2">
                      <h4 className="font-medium text-gray-900 dark:text-white">
                        {item.name}
                      </h4>
                      <div className="flex gap-1">
                        <button
                          onClick={() => handleEditItem(item)}
                          className="p-1 text-blue-500 hover:bg-blue-50 dark:hover:bg-blue-900/20 rounded"
                        >
                          <Edit2 className="w-4 h-4" />
                        </button>
                        <button
                          onClick={() => handleDeleteItem(item.id)}
                          className="p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </div>
                    
                    <div className="space-y-1 text-sm text-gray-600 dark:text-gray-300">
                      <p><span className="font-medium">Type:</span> {item.type}</p>
                      {item.color && <p><span className="font-medium">Color:</span> {item.color}</p>}
                      <p><span className="font-medium">Category:</span> {item.category}</p>
                      {item.weatherSuitability && (
                        <p><span className="font-medium">Weather:</span> {item.weatherSuitability}</p>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default WardrobeManager;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\WeatherAlerts.tsx ===
import React from 'react';
import { AlertTriangle, X } from 'lucide-react';

interface WeatherAlert {
  id: string;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high';
}

interface WeatherAlertsProps {
  alerts: WeatherAlert[];
  onDismiss: (alertId: string) => void;
}

const WeatherAlerts: React.FC<WeatherAlertsProps> = ({ alerts, onDismiss }) => {
  if (alerts.length === 0) return null;

  const getSeverityStyles = (severity: string) => {
    switch (severity) {
      case 'high':
        return 'bg-red-100 dark:bg-red-900/20 border-red-300 dark:border-red-700 text-red-800 dark:text-red-300';
      case 'medium':
        return 'bg-yellow-100 dark:bg-yellow-900/20 border-yellow-300 dark:border-yellow-700 text-yellow-800 dark:text-yellow-300';
      default:
        return 'bg-blue-100 dark:bg-blue-900/20 border-blue-300 dark:border-blue-700 text-blue-800 dark:text-blue-300';
    }
  };

  return (
    <div className="w-full max-w-md mx-auto space-y-3 animate-fade-in">
      {alerts.map((alert) => (
        <div
          key={alert.id}
          className={`border rounded-xl p-4 ${getSeverityStyles(alert.severity)}`}
        >
          <div className="flex items-start justify-between">
            <div className="flex items-start gap-3">
              <AlertTriangle className="w-5 h-5 mt-0.5 flex-shrink-0" />
              <div>
                <h4 className="font-semibold mb-1">{alert.title}</h4>
                <p className="text-sm opacity-90">{alert.description}</p>
              </div>
            </div>
            <button
              onClick={() => onDismiss(alert.id)}
              className="p-1 hover:bg-black/10 rounded-lg transition-colors duration-200"
              aria-label="Dismiss alert"
            >
              <X className="w-4 h-4" />
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default WeatherAlerts;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\WeatherDisplay.tsx ===
import React from 'react';
import { Thermometer, Droplets, Wind, Eye } from 'lucide-react';
import WeatherIcon from './WeatherIcon';
import { useTranslation } from '../hooks/useTranslation';

interface WeatherData {
  city: string;
  country: string;
  temperature: number;
  condition: string;
  humidity: number;
  windSpeed: number;
  visibility: number;
}

interface WeatherDisplayProps {
  weather: WeatherData;
  isCelsius: boolean;
  onToggleUnit: () => void;
}

const WeatherDisplay: React.FC<WeatherDisplayProps> = ({
  weather,
  isCelsius,
  onToggleUnit
}) => {
  const displayTemp = isCelsius 
    ? Math.round(weather.temperature)
    : Math.round((weather.temperature * 9/5) + 32);
  
  const tempUnit = isCelsius ? '¬∞C' : '¬∞F';
  const { t } = useTranslation();

  return (
    <div className="w-full max-w-md mx-auto animate-fade-in">
      <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg p-4 sm:p-6 border border-gray-200 dark:border-gray-700">
        <div className="text-center mb-4 sm:mb-6">
          <h2 className="text-xl sm:text-2xl font-bold text-gray-900 dark:text-white mb-1 break-words">
            {weather.city}, {weather.country}
          </h2>
          <p className="text-gray-600 dark:text-gray-300 capitalize">
            {weather.condition}
          </p>
        </div>

        <div className="flex items-center justify-center mb-4 sm:mb-6">
          <WeatherIcon condition={weather.condition} />
          <div className="ml-4">
            <div className="flex items-baseline">
              <span className="text-4xl sm:text-5xl font-bold text-gray-900 dark:text-white">
                {displayTemp}
              </span>
              <button
                onClick={onToggleUnit}
                className="ml-2 text-xl sm:text-2xl text-blue-500 hover:text-blue-600 transition-colors duration-200 font-medium touch-target"
              >
                {tempUnit}
              </button>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-3 gap-2 sm:gap-4">
          <div className="text-center p-2 sm:p-3 bg-gray-50 dark:bg-gray-700 rounded-xl">
            <Droplets className="w-5 h-5 text-blue-500 mx-auto mb-1" />
            <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-300">{t('humidity')}</p>
            <p className="font-semibold text-sm sm:text-base text-gray-900 dark:text-white">{weather.humidity}%</p>
          </div>
          
          <div className="text-center p-2 sm:p-3 bg-gray-50 dark:bg-gray-700 rounded-xl">
            <Wind className="w-5 h-5 text-teal-500 mx-auto mb-1" />
            <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-300">{t('wind')}</p>
            <p className="font-semibold text-sm sm:text-base text-gray-900 dark:text-white">{weather.windSpeed} km/h</p>
          </div>
          
          <div className="text-center p-2 sm:p-3 bg-gray-50 dark:bg-gray-700 rounded-xl">
            <Eye className="w-5 h-5 text-purple-500 mx-auto mb-1" />
            <p className="text-xs sm:text-sm text-gray-600 dark:text-gray-300">{t('visibility')}</p>
            <p className="font-semibold text-sm sm:text-base text-gray-900 dark:text-white">{weather.visibility} km</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default WeatherDisplay;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\WeatherForecast.tsx ===
import React, { useState } from 'react';
import { ChevronDown, ChevronUp, Calendar } from 'lucide-react';
import WeatherIcon from './WeatherIcon';
import { WardrobeItem } from '../hooks/useWardrobe';
import { useTranslation } from '../hooks/useTranslation';

interface ForecastDay {
  date: string;
  temperature: { min: number; max: number };
  condition: string;
  humidity: number;
  windSpeed: number;
}

interface WeatherForecastProps {
  forecast: ForecastDay[];
  isCelsius: boolean;
  wardrobeItems?: WardrobeItem[];
}

const WeatherForecast: React.FC<WeatherForecastProps> = ({ forecast, isCelsius, wardrobeItems = [] }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const { t } = useTranslation();

  const convertTemp = (temp: number) => {
    return isCelsius ? Math.round(temp) : Math.round((temp * 9/5) + 32);
  };

  const tempUnit = isCelsius ? '¬∞C' : '¬∞F';

  const generateDayOutfit = (temp: number, condition: string) => {
    if (temp <= 5) return 'Heavy coat, warm layers, boots';
    if (temp <= 15) return 'Jacket, long pants, closed shoes';
    if (temp <= 25) return 'Light sweater, jeans, sneakers';
    return 'T-shirt, shorts, sandals';
  };

  const generateWardrobeOutfitForDay = (temp: number, condition: string) => {
    if (wardrobeItems.length === 0) return null;

    const suitableItems = wardrobeItems.filter(item => {
      if (!item.weatherSuitability) return true;
      
      const suitability = item.weatherSuitability.toLowerCase();
      const weatherCondition = condition.toLowerCase();
      
      if (temp <= 5 && (suitability.includes('cold') || suitability.includes('all weather'))) return true;
      if (temp > 5 && temp <= 15 && (suitability.includes('cool') || suitability.includes('all weather'))) return true;
      if (temp > 15 && temp <= 25 && (suitability.includes('warm') || suitability.includes('all weather'))) return true;
      if (temp > 25 && (suitability.includes('hot') || suitability.includes('all weather'))) return true;
      
      if (weatherCondition.includes('rain') && (suitability.includes('rainy') || suitability.includes('all weather'))) return true;
      if (weatherCondition.includes('wind') && (suitability.includes('windy') || suitability.includes('all weather'))) return true;
      
      return false;
    });

    if (suitableItems.length === 0) return null;

    const categories = {
      top: suitableItems.filter(item => item.category === 'Top'),
      bottom: suitableItems.filter(item => item.category === 'Bottom'),
      outerwear: suitableItems.filter(item => item.category === 'Outerwear'),
      footwear: suitableItems.filter(item => item.category === 'Footwear')
    };

    const outfit = [];
    if (categories.top.length > 0) outfit.push(categories.top[0]);
    if (categories.bottom.length > 0) outfit.push(categories.bottom[0]);
    if (temp <= 20 && categories.outerwear.length > 0) outfit.push(categories.outerwear[0]);
    if (categories.footwear.length > 0) outfit.push(categories.footwear[0]);

    return outfit.map(item => `your ${item.color ? item.color.toLowerCase() + ' ' : ''}${item.name.toLowerCase()}`).join(', ');
  };

  return (
    <div className="w-full max-w-md mx-auto animate-fade-in">
      <div className="bg-white/90 dark:bg-gray-800/90 backdrop-blur-sm rounded-2xl shadow-lg border border-gray-200 dark:border-gray-700 overflow-hidden">
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="w-full p-4 flex items-center justify-between hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200"
        >
          <div className="flex items-center gap-2">
            <Calendar className="w-5 h-5 text-blue-500" />
            <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
              {t('dayForecast')}
            </h3>
          </div>
          {isExpanded ? (
            <ChevronUp className="w-5 h-5 text-gray-500" />
          ) : (
            <ChevronDown className="w-5 h-5 text-gray-500" />
          )}
        </button>

        {isExpanded && (
          <div className="border-t border-gray-200 dark:border-gray-700">
            {forecast.map((day, index) => (
              <div
                key={index}
                className="p-4 border-b border-gray-100 dark:border-gray-600 last:border-b-0"
              >
                <div className="flex items-center justify-between mb-3">
                  <div className="flex items-center gap-3">
                    <div className="scale-75">
                      <WeatherIcon condition={day.condition} />
                    </div>
                    <div>
                      <p className="font-medium text-gray-900 dark:text-white">
                        {new Date(day.date).toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' })}
                      </p>
                      <p className="text-sm text-gray-600 dark:text-gray-300 capitalize">
                        {day.condition}
                      </p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="font-bold text-gray-900 dark:text-white">
                      {convertTemp(day.temperature.max)}{tempUnit}
                    </p>
                    <p className="text-sm text-gray-500">
                      {convertTemp(day.temperature.min)}{tempUnit}
                    </p>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <div className="bg-blue-50 dark:bg-gray-700 rounded-lg p-3">
                    <p className="text-sm text-gray-700 dark:text-gray-300">
                      <span className="font-medium">{t('general')}:</span> {generateDayOutfit(day.temperature.max, day.condition)}
                    </p>
                  </div>
                  
                  {(() => {
                    const wardrobeOutfit = generateWardrobeOutfitForDay(day.temperature.max, day.condition);
                    return wardrobeOutfit ? (
                      <div className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-3">
                        <p className="text-sm text-gray-700 dark:text-gray-300">
                          <span className="font-medium">{t('myWardrobe')}:</span> {wardrobeOutfit}
                        </p>
                      </div>
                    ) : wardrobeItems.length > 0 ? (
                      <div className="bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-3">
                        <p className="text-xs text-yellow-700 dark:text-yellow-300">
                          {t('noSuitableWardrobe')}
                        </p>
                      </div>
                    ) : null;
                  })()}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default WeatherForecast;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\components\WeatherIcon.tsx ===
import React from 'react';
import { Sun, Cloud, CloudRain, CloudSnow, CloudLightning, Cloudy } from 'lucide-react';

interface WeatherIconProps {
  condition: string;
  size?: number;
}

const WeatherIcon: React.FC<WeatherIconProps> = ({ condition, size = 64 }) => {
  const getIcon = () => {
    const normalizedCondition = condition.toLowerCase();
    
    if (normalizedCondition.includes('sun') || normalizedCondition.includes('clear')) {
      return <Sun className={`w-16 h-16 text-yellow-500 animate-pulse`} />;
    }
    if (normalizedCondition.includes('rain') || normalizedCondition.includes('drizzle')) {
      return <CloudRain className={`w-16 h-16 text-blue-500 animate-bounce`} />;
    }
    if (normalizedCondition.includes('snow')) {
      return <CloudSnow className={`w-16 h-16 text-gray-300 animate-pulse`} />;
    }
    if (normalizedCondition.includes('storm') || normalizedCondition.includes('thunder')) {
      return <CloudLightning className={`w-16 h-16 text-purple-500 animate-bounce`} />;
    }
    if (normalizedCondition.includes('cloud')) {
      return <Cloudy className={`w-16 h-16 text-gray-500 animate-float`} />;
    }
    
    return <Cloud className={`w-16 h-16 text-gray-400 animate-float`} />;
  };

  return (
    <div className="flex items-center justify-center">
      {getIcon()}
    </div>
  );
};

export default WeatherIcon;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\hooks ===
[Error reading file]: [Errno 13] Permission denied: 'C:\\Users\\Dell\\Downloads\\project-bolt-sb1-dbc7xrpk (1)\\project\\src\\hooks'

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\hooks\useGeolocation.ts ===
import { useState } from 'react';

export const useGeolocation = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const getCurrentLocation = (): Promise<{ lat: number; lon: number }> => {
    return new Promise((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('Geolocation is not supported by this browser.'));
        return;
      }

      setIsLoading(true);
      setError('');

      navigator.geolocation.getCurrentPosition(
        (position) => {
          setIsLoading(false);
          resolve({
            lat: position.coords.latitude,
            lon: position.coords.longitude
          });
        },
        (error) => {
          setIsLoading(false);
          let errorMessage = 'Unable to retrieve your location.';
          
          switch (error.code) {
            case error.PERMISSION_DENIED:
              errorMessage = 'Location access denied. Please enable location permissions.';
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage = 'Location information is unavailable.';
              break;
            case error.TIMEOUT:
              errorMessage = 'Location request timed out.';
              break;
          }
          
          setError(errorMessage);
          reject(new Error(errorMessage));
        },
        {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 300000
        }
      );
    });
  };

  return {
    getCurrentLocation,
    isLoading,
    error
  };
};

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\hooks\useOfflineCache.ts ===
import { useState, useEffect } from 'react';

interface CachedData {
  weather: any;
  timestamp: number;
  city: string;
}

export const useOfflineCache = () => {
  const [cachedWeather, setCachedWeather] = useState<CachedData | null>(null);
  const [isOffline, setIsOffline] = useState(!navigator.onLine);

  useEffect(() => {
    const handleOnline = () => setIsOffline(false);
    const handleOffline = () => setIsOffline(true);

    window.addEventListener('online', handleOnline);
    window.addEventListener('offline', handleOffline);

    // Load cached data on mount
    const cached = localStorage.getItem('cachedWeatherData');
    if (cached) {
      try {
        const parsedCache = JSON.parse(cached);
        // Check if cache is less than 1 hour old
        if (Date.now() - parsedCache.timestamp < 3600000) {
          setCachedWeather(parsedCache);
        } else {
          localStorage.removeItem('cachedWeatherData');
        }
      } catch (error) {
        console.error('Error parsing cached weather data:', error);
        localStorage.removeItem('cachedWeatherData');
      }
    }

    return () => {
      window.removeEventListener('online', handleOnline);
      window.removeEventListener('offline', handleOffline);
    };
  }, []);

  const cacheWeatherData = (weather: any, city: string) => {
    const cacheData: CachedData = {
      weather,
      timestamp: Date.now(),
      city
    };
    
    setCachedWeather(cacheData);
    localStorage.setItem('cachedWeatherData', JSON.stringify(cacheData));
  };

  const getCachedWeather = () => {
    return cachedWeather;
  };

  const clearCache = () => {
    setCachedWeather(null);
    localStorage.removeItem('cachedWeatherData');
  };

  return {
    cachedWeather,
    isOffline,
    cacheWeatherData,
    getCachedWeather,
    clearCache
  };
};

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\hooks\useTranslation.ts ===
interface Translations {
  [key: string]: {
    [key: string]: string;
  };
}

const translations: Translations = {
  en: {
    // Header
    appTitle: "Smart Weather + Outfit Recommender",
    
    // City Input
    enterCity: "Enter city name...",
    getWeather: "Get Weather",
    useLocation: "Use my location",
    
    // Weather Display
    humidity: "Humidity",
    wind: "Wind",
    visibility: "Visibility",
    
    // Outfit Recommendation
    outfitRecommendation: "Outfit Recommendation",
    manageWardrobe: "Manage MyWardrobe",
    generalSuggestion: "General Suggestion",
    fromWardrobe: "From Your Wardrobe",
    speakRecommendation: "Speak Recommendation",
    stopSpeaking: "Stop Speaking",
    noSuitableItems: "No suitable items found in your wardrobe for this weather. Consider adding more items or check the weather suitability settings.",
    
    // Activity Suggestions
    suggestedActivities: "Suggested Activities",
    activitiesTip: "Activities are personalized based on current weather conditions in",
    
    // Weather Forecast
    dayForecast: "5-Day Forecast",
    general: "General",
    myWardrobe: "MyWardrobe",
    noSuitableWardrobe: "No suitable wardrobe items for this day",
    
    // Footer
    poweredBy: "Powered by",
    builtBy: "Built by Your Name",
    
    // Preferences
    preferences: "Preferences",
    clothingStyle: "Clothing Style",
    theme: "Theme",
    language: "Language",
    myWardrobe: "My Wardrobe",
    wardrobeDescription: "Add your clothing items to get personalized outfit suggestions",
    cancel: "Cancel",
    save: "Save",
    
    // Wardrobe Manager
    manageMyWardrobe: "Manage MyWardrobe",
    addNewItem: "Add New Item",
    editItem: "Edit Item",
    itemName: "Item Name",
    itemNamePlaceholder: "e.g., Blue Denim Jacket",
    type: "Type",
    selectType: "Select type",
    color: "Color",
    colorPlaceholder: "e.g., Blue, Red, Black",
    category: "Category",
    selectCategory: "Select category",
    weatherSuitability: "Weather Suitability (Optional)",
    anyWeather: "Any weather",
    updateItem: "Update Item",
    addItem: "Add Item",
    yourWardrobe: "Your Wardrobe",
    items: "items",
    noItemsYet: "No items in your wardrobe yet.",
    addItemsDescription: "Add some items to get personalized outfit suggestions!",
    
    // Weather Alerts
    highWindWarning: "High Wind Warning",
    windWarningDesc: "Strong winds expected with speeds up to",
    secureObjects: "Secure loose objects.",
    heatAdvisory: "Heat Advisory",
    heatAdvisoryDesc: "Extremely high temperatures. Stay hydrated and avoid prolonged sun exposure.",
    coldWeatherWarning: "Cold Weather Warning",
    coldWarningDesc: "Extremely cold temperatures. Dress warmly and limit outdoor exposure.",
    
    // Offline
    offlineMessage: "You're offline. Showing cached data.",
    
    // Errors
    cityNotFound: "City not found. Please check the spelling and try again.",
    invalidApiKey: "Invalid API key. Please check your configuration.",
    weatherServiceError: "Weather service error",
    failedToFetch: "Failed to fetch weather data. Please try again.",
    locationDenied: "Location access denied. Please enable location permissions.",
    locationUnavailable: "Location information is unavailable.",
    locationTimeout: "Location request timed out.",
    unableToRetrieve: "Unable to retrieve your location.",
    apiNotConfigured: "API key not configured. Please check your environment variables."
  },
  es: {
    // Header
    appTitle: "Recomendador Inteligente de Clima + Vestimenta",
    
    // City Input
    enterCity: "Ingresa el nombre de la ciudad...",
    getWeather: "Obtener Clima",
    useLocation: "Usar mi ubicaci√≥n",
    
    // Weather Display
    humidity: "Humedad",
    wind: "Viento",
    visibility: "Visibilidad",
    
    // Outfit Recommendation
    outfitRecommendation: "Recomendaci√≥n de Vestimenta",
    manageWardrobe: "Gestionar Mi Guardarropa",
    generalSuggestion: "Sugerencia General",
    fromWardrobe: "De Tu Guardarropa",
    speakRecommendation: "Leer Recomendaci√≥n",
    stopSpeaking: "Detener Lectura",
    noSuitableItems: "No se encontraron art√≠culos adecuados en tu guardarropa para este clima. Considera agregar m√°s art√≠culos o verificar la configuraci√≥n de idoneidad clim√°tica.",
    
    // Activity Suggestions
    suggestedActivities: "Actividades Sugeridas",
    activitiesTip: "Las actividades est√°n personalizadas seg√∫n las condiciones clim√°ticas actuales en",
    
    // Weather Forecast
    dayForecast: "Pron√≥stico de 5 D√≠as",
    general: "General",
    myWardrobe: "Mi Guardarropa",
    noSuitableWardrobe: "No hay art√≠culos de guardarropa adecuados para este d√≠a",
    
    // Footer
    poweredBy: "Desarrollado por",
    builtBy: "Creado por Tu Nombre",
    
    // Preferences
    preferences: "Preferencias",
    clothingStyle: "Estilo de Ropa",
    theme: "Tema",
    language: "Idioma",
    myWardrobe: "Mi Guardarropa",
    wardrobeDescription: "Agrega tus prendas de vestir para obtener sugerencias personalizadas",
    cancel: "Cancelar",
    save: "Guardar",
    
    // Wardrobe Manager
    manageMyWardrobe: "Gestionar Mi Guardarropa",
    addNewItem: "Agregar Nuevo Art√≠culo",
    editItem: "Editar Art√≠culo",
    itemName: "Nombre del Art√≠culo",
    itemNamePlaceholder: "ej., Chaqueta de Mezclilla Azul",
    type: "Tipo",
    selectType: "Seleccionar tipo",
    color: "Color",
    colorPlaceholder: "ej., Azul, Rojo, Negro",
    category: "Categor√≠a",
    selectCategory: "Seleccionar categor√≠a",
    weatherSuitability: "Idoneidad Clim√°tica (Opcional)",
    anyWeather: "Cualquier clima",
    updateItem: "Actualizar Art√≠culo",
    addItem: "Agregar Art√≠culo",
    yourWardrobe: "Tu Guardarropa",
    items: "art√≠culos",
    noItemsYet: "A√∫n no tienes art√≠culos en tu guardarropa.",
    addItemsDescription: "¬°Agrega algunos art√≠culos para obtener sugerencias personalizadas!",
    
    // Weather Alerts
    highWindWarning: "Advertencia de Viento Fuerte",
    windWarningDesc: "Se esperan vientos fuertes con velocidades de hasta",
    secureObjects: "Asegura objetos sueltos.",
    heatAdvisory: "Aviso de Calor",
    heatAdvisoryDesc: "Temperaturas extremadamente altas. Mantente hidratado y evita la exposici√≥n prolongada al sol.",
    coldWeatherWarning: "Advertencia de Clima Fr√≠o",
    coldWarningDesc: "Temperaturas extremadamente fr√≠as. V√≠stete abrigado y limita la exposici√≥n al exterior.",
    
    // Offline
    offlineMessage: "Est√°s desconectado. Mostrando datos en cach√©.",
    
    // Errors
    cityNotFound: "Ciudad no encontrada. Por favor verifica la ortograf√≠a e intenta de nuevo.",
    invalidApiKey: "Clave API inv√°lida. Por favor verifica tu configuraci√≥n.",
    weatherServiceError: "Error del servicio meteorol√≥gico",
    failedToFetch: "Error al obtener datos meteorol√≥gicos. Por favor intenta de nuevo.",
    locationDenied: "Acceso a ubicaci√≥n denegado. Por favor habilita los permisos de ubicaci√≥n.",
    locationUnavailable: "Informaci√≥n de ubicaci√≥n no disponible.",
    locationTimeout: "Tiempo de espera de solicitud de ubicaci√≥n agotado.",
    unableToRetrieve: "No se puede obtener tu ubicaci√≥n.",
    apiNotConfigured: "Clave API no configurada. Por favor verifica tus variables de entorno."
  },
  fr: {
    // Header
    appTitle: "Recommandateur Intelligent M√©t√©o + Tenue",
    
    // City Input
    enterCity: "Entrez le nom de la ville...",
    getWeather: "Obtenir la M√©t√©o",
    useLocation: "Utiliser ma position",
    
    // Weather Display
    humidity: "Humidit√©",
    wind: "Vent",
    visibility: "Visibilit√©",
    
    // Outfit Recommendation
    outfitRecommendation: "Recommandation de Tenue",
    manageWardrobe: "G√©rer Ma Garde-robe",
    generalSuggestion: "Suggestion G√©n√©rale",
    fromWardrobe: "De Votre Garde-robe",
    speakRecommendation: "Lire la Recommandation",
    stopSpeaking: "Arr√™ter la Lecture",
    noSuitableItems: "Aucun article appropri√© trouv√© dans votre garde-robe pour ce temps. Consid√©rez ajouter plus d'articles ou v√©rifiez les param√®tres d'ad√©quation m√©t√©orologique.",
    
    // Activity Suggestions
    suggestedActivities: "Activit√©s Sugg√©r√©es",
    activitiesTip: "Les activit√©s sont personnalis√©es selon les conditions m√©t√©orologiques actuelles √†",
    
    // Weather Forecast
    dayForecast: "Pr√©visions 5 Jours",
    general: "G√©n√©ral",
    myWardrobe: "Ma Garde-robe",
    noSuitableWardrobe: "Aucun article de garde-robe appropri√© pour ce jour",
    
    // Footer
    poweredBy: "Aliment√© par",
    builtBy: "Cr√©√© par Votre Nom",
    
    // Preferences
    preferences: "Pr√©f√©rences",
    clothingStyle: "Style Vestimentaire",
    theme: "Th√®me",
    language: "Langue",
    myWardrobe: "Ma Garde-robe",
    wardrobeDescription: "Ajoutez vos v√™tements pour obtenir des suggestions personnalis√©es",
    cancel: "Annuler",
    save: "Sauvegarder",
    
    // Wardrobe Manager
    manageMyWardrobe: "G√©rer Ma Garde-robe",
    addNewItem: "Ajouter Nouvel Article",
    editItem: "Modifier l'Article",
    itemName: "Nom de l'Article",
    itemNamePlaceholder: "ex., Veste en Jean Bleue",
    type: "Type",
    selectType: "S√©lectionner le type",
    color: "Couleur",
    colorPlaceholder: "ex., Bleu, Rouge, Noir",
    category: "Cat√©gorie",
    selectCategory: "S√©lectionner la cat√©gorie",
    weatherSuitability: "Ad√©quation M√©t√©orologique (Optionnel)",
    anyWeather: "Tout temps",
    updateItem: "Mettre √† Jour l'Article",
    addItem: "Ajouter l'Article",
    yourWardrobe: "Votre Garde-robe",
    items: "articles",
    noItemsYet: "Aucun article dans votre garde-robe pour le moment.",
    addItemsDescription: "Ajoutez quelques articles pour obtenir des suggestions personnalis√©es !",
    
    // Weather Alerts
    highWindWarning: "Avertissement de Vent Fort",
    windWarningDesc: "Vents forts attendus avec des vitesses allant jusqu'√†",
    secureObjects: "S√©curisez les objets non fix√©s.",
    heatAdvisory: "Avis de Chaleur",
    heatAdvisoryDesc: "Temp√©ratures extr√™mement √©lev√©es. Restez hydrat√© et √©vitez l'exposition prolong√©e au soleil.",
    coldWeatherWarning: "Avertissement de Temps Froid",
    coldWarningDesc: "Temp√©ratures extr√™mement froides. Habillez-vous chaudement et limitez l'exposition ext√©rieure.",
    
    // Offline
    offlineMessage: "Vous √™tes hors ligne. Affichage des donn√©es en cache.",
    
    // Errors
    cityNotFound: "Ville non trouv√©e. Veuillez v√©rifier l'orthographe et r√©essayer.",
    invalidApiKey: "Cl√© API invalide. Veuillez v√©rifier votre configuration.",
    weatherServiceError: "Erreur du service m√©t√©orologique",
    failedToFetch: "√âchec de r√©cup√©ration des donn√©es m√©t√©orologiques. Veuillez r√©essayer.",
    locationDenied: "Acc√®s √† la localisation refus√©. Veuillez activer les permissions de localisation.",
    locationUnavailable: "Informations de localisation non disponibles.",
    locationTimeout: "D√©lai d'attente de la demande de localisation d√©pass√©.",
    unableToRetrieve: "Impossible de r√©cup√©rer votre localisation.",
    apiNotConfigured: "Cl√© API non configur√©e. Veuillez v√©rifier vos variables d'environnement."
  },
  de: {
    // Header
    appTitle: "Intelligenter Wetter + Outfit Empfehler",
    
    // City Input
    enterCity: "Stadtname eingeben...",
    getWeather: "Wetter Abrufen",
    useLocation: "Meinen Standort verwenden",
    
    // Weather Display
    humidity: "Luftfeuchtigkeit",
    wind: "Wind",
    visibility: "Sichtweite",
    
    // Outfit Recommendation
    outfitRecommendation: "Outfit-Empfehlung",
    manageWardrobe: "Meine Garderobe Verwalten",
    generalSuggestion: "Allgemeine Empfehlung",
    fromWardrobe: "Aus Ihrer Garderobe",
    speakRecommendation: "Empfehlung Vorlesen",
    stopSpeaking: "Vorlesen Stoppen",
    noSuitableItems: "Keine geeigneten Artikel in Ihrer Garderobe f√ºr dieses Wetter gefunden. Erw√§gen Sie, mehr Artikel hinzuzuf√ºgen oder √ºberpr√ºfen Sie die Wettereignungseinstellungen.",
    
    // Activity Suggestions
    suggestedActivities: "Vorgeschlagene Aktivit√§ten",
    activitiesTip: "Aktivit√§ten sind personalisiert basierend auf aktuellen Wetterbedingungen in",
    
    // Weather Forecast
    dayForecast: "5-Tage-Vorhersage",
    general: "Allgemein",
    myWardrobe: "Meine Garderobe",
    noSuitableWardrobe: "Keine geeigneten Garderobe-Artikel f√ºr diesen Tag",
    
    // Footer
    poweredBy: "Unterst√ºtzt von",
    builtBy: "Erstellt von Ihr Name",
    
    // Preferences
    preferences: "Einstellungen",
    clothingStyle: "Kleidungsstil",
    theme: "Design",
    language: "Sprache",
    myWardrobe: "Meine Garderobe",
    wardrobeDescription: "F√ºgen Sie Ihre Kleidungsst√ºcke hinzu, um personalisierte Empfehlungen zu erhalten",
    cancel: "Abbrechen",
    save: "Speichern",
    
    // Wardrobe Manager
    manageMyWardrobe: "Meine Garderobe Verwalten",
    addNewItem: "Neuen Artikel Hinzuf√ºgen",
    editItem: "Artikel Bearbeiten",
    itemName: "Artikelname",
    itemNamePlaceholder: "z.B., Blaue Jeansjacke",
    type: "Typ",
    selectType: "Typ ausw√§hlen",
    color: "Farbe",
    colorPlaceholder: "z.B., Blau, Rot, Schwarz",
    category: "Kategorie",
    selectCategory: "Kategorie ausw√§hlen",
    weatherSuitability: "Wettereignung (Optional)",
    anyWeather: "Jedes Wetter",
    updateItem: "Artikel Aktualisieren",
    addItem: "Artikel Hinzuf√ºgen",
    yourWardrobe: "Ihre Garderobe",
    items: "Artikel",
    noItemsYet: "Noch keine Artikel in Ihrer Garderobe.",
    addItemsDescription: "F√ºgen Sie einige Artikel hinzu, um personalisierte Empfehlungen zu erhalten!",
    
    // Weather Alerts
    highWindWarning: "Starkwind-Warnung",
    windWarningDesc: "Starke Winde erwartet mit Geschwindigkeiten bis zu",
    secureObjects: "Sichern Sie lose Gegenst√§nde.",
    heatAdvisory: "Hitze-Warnung",
    heatAdvisoryDesc: "Extrem hohe Temperaturen. Bleiben Sie hydratisiert und vermeiden Sie l√§ngere Sonnenexposition.",
    coldWeatherWarning: "K√§ltewetter-Warnung",
    coldWarningDesc: "Extrem kalte Temperaturen. Ziehen Sie sich warm an und begrenzen Sie die Exposition im Freien.",
    
    // Offline
    offlineMessage: "Sie sind offline. Zeige zwischengespeicherte Daten.",
    
    // Errors
    cityNotFound: "Stadt nicht gefunden. Bitte √ºberpr√ºfen Sie die Schreibweise und versuchen Sie es erneut.",
    invalidApiKey: "Ung√ºltiger API-Schl√ºssel. Bitte √ºberpr√ºfen Sie Ihre Konfiguration.",
    weatherServiceError: "Wetterdienst-Fehler",
    failedToFetch: "Fehler beim Abrufen der Wetterdaten. Bitte versuchen Sie es erneut.",
    locationDenied: "Standortzugriff verweigert. Bitte aktivieren Sie die Standortberechtigungen.",
    locationUnavailable: "Standortinformationen nicht verf√ºgbar.",
    locationTimeout: "Standortanfrage-Timeout.",
    unableToRetrieve: "Ihr Standort kann nicht abgerufen werden.",
    apiNotConfigured: "API-Schl√ºssel nicht konfiguriert. Bitte √ºberpr√ºfen Sie Ihre Umgebungsvariablen."
  },
  it: {
    // Header
    appTitle: "Raccomandatore Intelligente Meteo + Outfit",
    
    // City Input
    enterCity: "Inserisci il nome della citt√†...",
    getWeather: "Ottieni Meteo",
    useLocation: "Usa la mia posizione",
    
    // Weather Display
    humidity: "Umidit√†",
    wind: "Vento",
    visibility: "Visibilit√†",
    
    // Outfit Recommendation
    outfitRecommendation: "Raccomandazione Outfit",
    manageWardrobe: "Gestisci Il Mio Guardaroba",
    generalSuggestion: "Suggerimento Generale",
    fromWardrobe: "Dal Tuo Guardaroba",
    speakRecommendation: "Leggi Raccomandazione",
    stopSpeaking: "Ferma Lettura",
    noSuitableItems: "Nessun articolo adatto trovato nel tuo guardaroba per questo tempo. Considera di aggiungere pi√π articoli o controlla le impostazioni di idoneit√† meteorologica.",
    
    // Activity Suggestions
    suggestedActivities: "Attivit√† Suggerite",
    activitiesTip: "Le attivit√† sono personalizzate in base alle condizioni meteorologiche attuali a",
    
    // Weather Forecast
    dayForecast: "Previsioni 5 Giorni",
    general: "Generale",
    myWardrobe: "Il Mio Guardaroba",
    noSuitableWardrobe: "Nessun articolo di guardaroba adatto per questo giorno",
    
    // Footer
    poweredBy: "Alimentato da",
    builtBy: "Creato da Il Tuo Nome",
    
    // Preferences
    preferences: "Preferenze",
    clothingStyle: "Stile di Abbigliamento",
    theme: "Tema",
    language: "Lingua",
    myWardrobe: "Il Mio Guardaroba",
    wardrobeDescription: "Aggiungi i tuoi capi di abbigliamento per ottenere suggerimenti personalizzati",
    cancel: "Annulla",
    save: "Salva",
    
    // Wardrobe Manager
    manageMyWardrobe: "Gestisci Il Mio Guardaroba",
    addNewItem: "Aggiungi Nuovo Articolo",
    editItem: "Modifica Articolo",
    itemName: "Nome Articolo",
    itemNamePlaceholder: "es., Giacca di Jeans Blu",
    type: "Tipo",
    selectType: "Seleziona tipo",
    color: "Colore",
    colorPlaceholder: "es., Blu, Rosso, Nero",
    category: "Categoria",
    selectCategory: "Seleziona categoria",
    weatherSuitability: "Idoneit√† Meteorologica (Opzionale)",
    anyWeather: "Qualsiasi tempo",
    updateItem: "Aggiorna Articolo",
    addItem: "Aggiungi Articolo",
    yourWardrobe: "Il Tuo Guardaroba",
    items: "articoli",
    noItemsYet: "Nessun articolo nel tuo guardaroba ancora.",
    addItemsDescription: "Aggiungi alcuni articoli per ottenere suggerimenti personalizzati!",
    
    // Weather Alerts
    highWindWarning: "Avviso Vento Forte",
    windWarningDesc: "Venti forti previsti con velocit√† fino a",
    secureObjects: "Fissa oggetti non ancorati.",
    heatAdvisory: "Avviso Calore",
    heatAdvisoryDesc: "Temperature estremamente elevate. Rimani idratato ed evita l'esposizione prolungata al sole.",
    coldWeatherWarning: "Avviso Tempo Freddo",
    coldWarningDesc: "Temperature estremamente fredde. Vestiti calorosamente e limita l'esposizione esterna.",
    
    // Offline
    offlineMessage: "Sei offline. Mostrando dati memorizzati.",
    
    // Errors
    cityNotFound: "Citt√† non trovata. Controlla l'ortografia e riprova.",
    invalidApiKey: "Chiave API non valida. Controlla la tua configurazione.",
    weatherServiceError: "Errore servizio meteorologico",
    failedToFetch: "Impossibile recuperare i dati meteorologici. Riprova.",
    locationDenied: "Accesso alla posizione negato. Abilita i permessi di localizzazione.",
    locationUnavailable: "Informazioni sulla posizione non disponibili.",
    locationTimeout: "Timeout richiesta posizione.",
    unableToRetrieve: "Impossibile recuperare la tua posizione.",
    apiNotConfigured: "Chiave API non configurata. Controlla le tue variabili d'ambiente."
  }
};

export const useTranslation = () => {
  const getStoredLanguage = (): string => {
    try {
      const preferences = localStorage.getItem('userPreferences');
      if (preferences) {
        const parsed = JSON.parse(preferences);
        return parsed.language || 'en';
      }
    } catch (error) {
      console.error('Error getting stored language:', error);
    }
    return 'en';
  };

  const currentLanguage = getStoredLanguage();

  const t = (key: string): string => {
    const keys = key.split('.');
    let value: any = translations[currentLanguage];
    
    for (const k of keys) {
      if (value && typeof value === 'object' && k in value) {
        value = value[k];
      } else {
        // Fallback to English if translation not found
        value = translations.en;
        for (const fallbackKey of keys) {
          if (value && typeof value === 'object' && fallbackKey in value) {
            value = value[fallbackKey];
          } else {
            return key; // Return key if no translation found
          }
        }
        break;
      }
    }
    
    return typeof value === 'string' ? value : key;
  };

  return { t, currentLanguage };
};

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\hooks\useUserPreferences.ts ===
import { useState, useEffect } from 'react';

interface UserPreferences {
  clothingStyles: string[];
  theme: string;
  language: string;
  wardrobeItems: string;
  temperatureUnit: 'celsius' | 'fahrenheit';
}

const defaultPreferences: UserPreferences = {
  clothingStyles: ['casual'],
  theme: 'default',
  language: 'en',
  wardrobeItems: '',
  temperatureUnit: 'celsius'
};

export const useUserPreferences = () => {
  const [preferences, setPreferences] = useState<UserPreferences>(defaultPreferences);

  useEffect(() => {
    const savedPrefs = localStorage.getItem('userPreferences');
    if (savedPrefs) {
      try {
        const parsed = JSON.parse(savedPrefs);
        setPreferences({ ...defaultPreferences, ...parsed });
      } catch (error) {
        console.error('Error parsing saved preferences:', error);
      }
    }
  }, []);

  const updatePreferences = (newPreferences: Partial<UserPreferences>) => {
    const updated = { ...preferences, ...newPreferences };
    setPreferences(updated);
    localStorage.setItem('userPreferences', JSON.stringify(updated));
  };

  const resetPreferences = () => {
    setPreferences(defaultPreferences);
    localStorage.removeItem('userPreferences');
  };

  return {
    preferences,
    updatePreferences,
    resetPreferences
  };
};

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\hooks\useWardrobe.ts ===
import { useState, useEffect } from 'react';

export interface WardrobeItem {
  id: string;
  name: string;
  type: string;
  color: string;
  category: string;
  weatherSuitability?: string;
}

export const useWardrobe = () => {
  const [wardrobeItems, setWardrobeItems] = useState<WardrobeItem[]>([]);

  useEffect(() => {
    loadWardrobeItems();
  }, []);

  const loadWardrobeItems = () => {
    const saved = localStorage.getItem('wardrobeItems');
    if (saved) {
      try {
        const items = JSON.parse(saved);
        setWardrobeItems(items);
      } catch (error) {
        console.error('Error loading wardrobe items:', error);
      }
    }
  };

  const updateWardrobeItems = (items: WardrobeItem[]) => {
    setWardrobeItems(items);
  };

  const getWardrobeForWeather = (temperature: number, condition: string) => {
    const weatherCondition = condition.toLowerCase();
    
    return wardrobeItems.filter(item => {
      if (!item.weatherSuitability) return true;
      
      const suitability = item.weatherSuitability.toLowerCase();
      
      // Temperature-based filtering
      if (temperature <= 5 && (suitability.includes('cold') || suitability.includes('all weather'))) return true;
      if (temperature > 5 && temperature <= 15 && (suitability.includes('cool') || suitability.includes('all weather'))) return true;
      if (temperature > 15 && temperature <= 25 && (suitability.includes('warm') || suitability.includes('all weather'))) return true;
      if (temperature > 25 && (suitability.includes('hot') || suitability.includes('all weather'))) return true;
      
      // Condition-based filtering
      if (weatherCondition.includes('rain') && (suitability.includes('rainy') || suitability.includes('all weather'))) return true;
      if (weatherCondition.includes('wind') && (suitability.includes('windy') || suitability.includes('all weather'))) return true;
      
      return false;
    });
  };

  const generateWardrobeOutfit = (temperature: number, condition: string) => {
    const suitableItems = getWardrobeForWeather(temperature, condition);
    
    if (suitableItems.length === 0) {
      return null;
    }

    const categories = {
      top: suitableItems.filter(item => item.category === 'Top'),
      bottom: suitableItems.filter(item => item.category === 'Bottom'),
      outerwear: suitableItems.filter(item => item.category === 'Outerwear'),
      footwear: suitableItems.filter(item => item.category === 'Footwear'),
      accessories: suitableItems.filter(item => item.category === 'Accessories')
    };

    const outfit = [];
    
    // Select one item from each category if available
    if (categories.top.length > 0) {
      const randomTop = categories.top[Math.floor(Math.random() * categories.top.length)];
      outfit.push(`Your ${randomTop.color ? randomTop.color.toLowerCase() + ' ' : ''}${randomTop.name.toLowerCase()}`);
    }
    
    if (categories.bottom.length > 0) {
      const randomBottom = categories.bottom[Math.floor(Math.random() * categories.bottom.length)];
      outfit.push(`your ${randomBottom.color ? randomBottom.color.toLowerCase() + ' ' : ''}${randomBottom.name.toLowerCase()}`);
    }
    
    // Add outerwear for cooler weather
    if (temperature <= 20 && categories.outerwear.length > 0) {
      const randomOuterwear = categories.outerwear[Math.floor(Math.random() * categories.outerwear.length)];
      outfit.push(`your ${randomOuterwear.color ? randomOuterwear.color.toLowerCase() + ' ' : ''}${randomOuterwear.name.toLowerCase()}`);
    }
    
    if (categories.footwear.length > 0) {
      const randomFootwear = categories.footwear[Math.floor(Math.random() * categories.footwear.length)];
      outfit.push(`your ${randomFootwear.color ? randomFootwear.color.toLowerCase() + ' ' : ''}${randomFootwear.name.toLowerCase()}`);
    }
    
    // Add accessories occasionally
    if (categories.accessories.length > 0 && Math.random() > 0.5) {
      const randomAccessory = categories.accessories[Math.floor(Math.random() * categories.accessories.length)];
      outfit.push(`your ${randomAccessory.color ? randomAccessory.color.toLowerCase() + ' ' : ''}${randomAccessory.name.toLowerCase()}`);
    }
    
    return outfit.length > 0 ? outfit.join(', ') : null;
  };

  return {
    wardrobeItems,
    updateWardrobeItems,
    getWardrobeForWeather,
    generateWardrobeOutfit,
    loadWardrobeItems
  };
};

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\hooks\useWeatherAPI.ts ===
import { useState } from 'react';

interface WeatherData {
  city: string;
  country: string;
  temperature: number;
  condition: string;
  humidity: number;
  windSpeed: number;
  visibility: number;
}

interface ForecastDay {
  date: string;
  temperature: { min: number; max: number };
  condition: string;
  humidity: number;
  windSpeed: number;
}

interface WeatherAlert {
  id: string;
  title: string;
  description: string;
  severity: 'low' | 'medium' | 'high';
}

const API_KEY = import.meta.env.VITE_OPENWEATHER_API_KEY;
const BASE_URL = import.meta.env.VITE_OPENWEATHER_BASE_URL;

export const useWeatherAPI = () => {
  const [weather, setWeather] = useState<WeatherData | null>(null);
  const [forecast, setForecast] = useState<ForecastDay[]>([]);
  const [alerts, setAlerts] = useState<WeatherAlert[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const fetchWeather = async (city: string) => {
    if (!API_KEY) {
      setError('API key not configured. Please check your environment variables.');
      return;
    }

    setIsLoading(true);
    setError('');
    
    try {
      // Fetch current weather
      const weatherResponse = await fetch(
        `${BASE_URL}/weather?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric`
      );
      
      if (!weatherResponse.ok) {
        if (weatherResponse.status === 404) {
          throw new Error('City not found. Please check the spelling and try again.');
        } else if (weatherResponse.status === 401) {
          throw new Error('Invalid API key. Please check your configuration.');
        } else {
          throw new Error(`Weather service error: ${weatherResponse.status}`);
        }
      }
      
      const weatherData = await weatherResponse.json();
      
      // Fetch 5-day forecast
      const forecastResponse = await fetch(
        `${BASE_URL}/forecast?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric`
      );
      
      if (!forecastResponse.ok) {
        throw new Error('Failed to fetch forecast data');
      }
      
      const forecastData = await forecastResponse.json();
      
      // Process current weather
      const processedWeather: WeatherData = {
        city: weatherData.name,
        country: weatherData.sys.country,
        temperature: Math.round(weatherData.main.temp),
        condition: weatherData.weather[0].main,
        humidity: weatherData.main.humidity,
        windSpeed: Math.round(weatherData.wind.speed * 3.6), // Convert m/s to km/h
        visibility: weatherData.visibility ? Math.round(weatherData.visibility / 1000) : 10 // Convert m to km
      };
      
      // Process 5-day forecast (take one reading per day at noon)
      const processedForecast: ForecastDay[] = [];
      const dailyData: { [key: string]: any } = {};
      
      forecastData.list.forEach((item: any) => {
        const date = new Date(item.dt * 1000);
        const dateKey = date.toDateString();
        
        if (!dailyData[dateKey]) {
          dailyData[dateKey] = {
            temps: [],
            conditions: [],
            humidity: [],
            windSpeed: [],
            date: item.dt_txt
          };
        }
        
        dailyData[dateKey].temps.push(item.main.temp);
        dailyData[dateKey].conditions.push(item.weather[0].main);
        dailyData[dateKey].humidity.push(item.main.humidity);
        dailyData[dateKey].windSpeed.push(item.wind.speed * 3.6);
      });
      
      Object.values(dailyData).slice(0, 5).forEach((day: any) => {
        processedForecast.push({
          date: day.date,
          temperature: {
            min: Math.round(Math.min(...day.temps)),
            max: Math.round(Math.max(...day.temps))
          },
          condition: day.conditions[0], // Take first condition of the day
          humidity: Math.round(day.humidity.reduce((a: number, b: number) => a + b, 0) / day.humidity.length),
          windSpeed: Math.round(day.windSpeed.reduce((a: number, b: number) => a + b, 0) / day.windSpeed.length)
        });
      });

      // Generate weather alerts based on conditions
      const generatedAlerts: WeatherAlert[] = [];
      
      if (processedWeather.windSpeed > 50) {
        generatedAlerts.push({
          id: '1',
          title: 'High Wind Warning',
          description: `Strong winds expected with speeds up to ${processedWeather.windSpeed} km/h. Secure loose objects.`,
          severity: 'medium'
        });
      }
      
      if (processedWeather.temperature > 35) {
        generatedAlerts.push({
          id: '2',
          title: 'Heat Advisory',
          description: 'Extremely high temperatures. Stay hydrated and avoid prolonged sun exposure.',
          severity: 'high'
        });
      }
      
      if (processedWeather.temperature < -10) {
        generatedAlerts.push({
          id: '3',
          title: 'Cold Weather Warning',
          description: 'Extremely cold temperatures. Dress warmly and limit outdoor exposure.',
          severity: 'high'
        });
      }

      setWeather(processedWeather);
      setForecast(processedForecast);
      setAlerts(generatedAlerts);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch weather data. Please try again.';
      setError(errorMessage);
      console.error('Weather API Error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchWeatherByLocation = async (lat: number, lon: number) => {
    if (!API_KEY) {
      setError('API key not configured. Please check your environment variables.');
      return;
    }

    setIsLoading(true);
    setError('');
    
    try {
      // Fetch current weather by coordinates
      const weatherResponse = await fetch(
        `${BASE_URL}/weather?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`
      );
      
      if (!weatherResponse.ok) {
        if (weatherResponse.status === 401) {
          throw new Error('Invalid API key. Please check your configuration.');
        } else {
          throw new Error(`Weather service error: ${weatherResponse.status}`);
        }
      }
      
      const weatherData = await weatherResponse.json();
      
      // Fetch 5-day forecast by coordinates
      const forecastResponse = await fetch(
        `${BASE_URL}/forecast?lat=${lat}&lon=${lon}&appid=${API_KEY}&units=metric`
      );
      
      if (!forecastResponse.ok) {
        throw new Error('Failed to fetch forecast data');
      }
      
      const forecastData = await forecastResponse.json();
      
      // Process the data (same as above)
      const processedWeather: WeatherData = {
        city: weatherData.name || 'Current Location',
        country: weatherData.sys.country || 'Your Area',
        temperature: Math.round(weatherData.main.temp),
        condition: weatherData.weather[0].main,
        humidity: weatherData.main.humidity,
        windSpeed: Math.round(weatherData.wind.speed * 3.6),
        visibility: weatherData.visibility ? Math.round(weatherData.visibility / 1000) : 10
      };
      
      // Process forecast (same logic as above)
      const processedForecast: ForecastDay[] = [];
      const dailyData: { [key: string]: any } = {};
      
      forecastData.list.forEach((item: any) => {
        const date = new Date(item.dt * 1000);
        const dateKey = date.toDateString();
        
        if (!dailyData[dateKey]) {
          dailyData[dateKey] = {
            temps: [],
            conditions: [],
            humidity: [],
            windSpeed: [],
            date: item.dt_txt
          };
        }
        
        dailyData[dateKey].temps.push(item.main.temp);
        dailyData[dateKey].conditions.push(item.weather[0].main);
        dailyData[dateKey].humidity.push(item.main.humidity);
        dailyData[dateKey].windSpeed.push(item.wind.speed * 3.6);
      });
      
      Object.values(dailyData).slice(0, 5).forEach((day: any) => {
        processedForecast.push({
          date: day.date,
          temperature: {
            min: Math.round(Math.min(...day.temps)),
            max: Math.round(Math.max(...day.temps))
          },
          condition: day.conditions[0],
          humidity: Math.round(day.humidity.reduce((a: number, b: number) => a + b, 0) / day.humidity.length),
          windSpeed: Math.round(day.windSpeed.reduce((a: number, b: number) => a + b, 0) / day.windSpeed.length)
        });
      });

      setWeather(processedWeather);
      setForecast(processedForecast);
      setAlerts([]);
      
    } catch (err) {
      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch weather data for your location.';
      setError(errorMessage);
      console.error('Weather API Error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const dismissAlert = (alertId: string) => {
    setAlerts(alerts.filter(alert => alert.id !== alertId));
  };

  return {
    weather,
    forecast,
    alerts,
    isLoading,
    error,
    fetchWeather,
    fetchWeatherByLocation,
    dismissAlert
  };
};

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\types ===
[Error reading file]: [Errno 13] Permission denied: 'C:\\Users\\Dell\\Downloads\\project-bolt-sb1-dbc7xrpk (1)\\project\\src\\types'

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\types\lucide-react.d.ts ===
declare module 'lucide-react' {
  import { FC, SVGProps } from 'react';
  
  export interface LucideProps extends Omit<SVGProps<SVGSVGElement>, 'ref'> {
    size?: string | number;
    absoluteStrokeWidth?: boolean;
  }
  
  export type LucideIcon = FC<LucideProps>;
  
  export const Search: LucideIcon;
  export const MapPin: LucideIcon;
  export const Loader2: LucideIcon;
  export const Sun: LucideIcon;
  export const Moon: LucideIcon;
  export const Cloud: LucideIcon;
  export const CloudRain: LucideIcon;
  export const CloudSnow: LucideIcon;
  export const CloudLightning: LucideIcon;
  export const Cloudy: LucideIcon;
  export const Thermometer: LucideIcon;
  export const Droplets: LucideIcon;
  export const Wind: LucideIcon;
  export const Eye: LucideIcon;
  export const Volume2: LucideIcon;
  export const VolumeX: LucideIcon;
  export const Shirt: LucideIcon;
  export const Settings: LucideIcon;
  export const Sparkles: LucideIcon;
  export const Activity: LucideIcon;
  export const Clock: LucideIcon;
  export const Calendar: LucideIcon;
  export const ChevronDown: LucideIcon;
  export const ChevronUp: LucideIcon;
  export const AlertTriangle: LucideIcon;
  export const X: LucideIcon;
  export const Share2: LucideIcon;
  export const Twitter: LucideIcon;
  export const Facebook: LucideIcon;
  export const Copy: LucideIcon;
  export const Check: LucideIcon;
  export const ExternalLink: LucideIcon;
  export const Github: LucideIcon;
  export const Wifi: LucideIcon;
  export const WifiOff: LucideIcon;
  export const Plus: LucideIcon;
  export const Edit2: LucideIcon;
  export const Trash2: LucideIcon;
  export const Save: LucideIcon;
  export const Palette: LucideIcon;
  export const Globe: LucideIcon;
}

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\App.tsx ===
import React, { useState, useEffect } from 'react';
import Header from './components/Header';
import CityInputForm from './components/CityInputForm';
import WeatherDisplay from './components/WeatherDisplay';
import OutfitRecommendation from './components/OutfitRecommendation';
import WeatherForecast from './components/WeatherForecast';
import WeatherAlerts from './components/WeatherAlerts';
import ActivitySuggestions from './components/ActivitySuggestions';
import UserPreferences from './components/UserPreferences';
import Footer from './components/Footer';
import WardrobeManager from './components/WardrobeManager';
import { useWeatherAPI } from './hooks/useWeatherAPI';
import { useGeolocation } from './hooks/useGeolocation';
import { useUserPreferences } from './hooks/useUserPreferences';
import { useOfflineCache } from './hooks/useOfflineCache';
import { useWardrobe } from './hooks/useWardrobe';
import { Settings, WifiOff } from 'lucide-react';
import { useTranslation } from './hooks/useTranslation';

function App() {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [isCelsius, setIsCelsius] = useState(true);
  const [showPreferences, setShowPreferences] = useState(false);
  const [showWardrobeManager, setShowWardrobeManager] = useState(false);
  
  const { weather, forecast, alerts, isLoading, error, fetchWeather, fetchWeatherByLocation, dismissAlert } = useWeatherAPI();
  const { getCurrentLocation, isLoading: locationLoading, error: locationError } = useGeolocation();
  const { preferences, updatePreferences } = useUserPreferences();
  const { isOffline, cacheWeatherData, getCachedWeather } = useOfflineCache();
  const { wardrobeItems, updateWardrobeItems } = useWardrobe();
  const { t } = useTranslation();

  // Initialize PWA
  useEffect(() => {
    // Register service worker
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', () => {
        navigator.serviceWorker.register('/sw.js')
          .then((registration) => {
            console.log('SW registered: ', registration);
          })
          .catch((registrationError) => {
            console.log('SW registration failed: ', registrationError);
          });
      });
    }

    // Check for saved theme preference
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark' || (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
      setIsDarkMode(true);
    }

    // Load cached weather if offline
    if (isOffline) {
      const cached = getCachedWeather();
      if (cached) {
        console.log('Loaded cached weather data:', cached);
      }
    }
  }, [isOffline, getCachedWeather]);

  // Cache weather data when it's fetched
  useEffect(() => {
    if (weather && !isOffline) {
      cacheWeatherData(weather, weather.city);
    }
  }, [weather, isOffline, cacheWeatherData]);

  // Update temperature unit from preferences
  useEffect(() => {
    if (preferences.temperatureUnit) {
      setIsCelsius(preferences.temperatureUnit === 'celsius');
    }
  }, [preferences.temperatureUnit]);

  // Apply dark mode to document
  useEffect(() => {
    if (isDarkMode) {
      document.documentElement.classList.add('dark');
      localStorage.setItem('theme', 'dark');
    } else {
      document.documentElement.classList.remove('dark');
      localStorage.setItem('theme', 'light');
    }
  }, [isDarkMode]);

  const handleCitySubmit = (city: string) => {
    fetchWeather(city);
  };

  const handleLocationRequest = async () => {
    try {
      const location = await getCurrentLocation();
      await fetchWeatherByLocation(location.lat, location.lon);
    } catch (err) {
      console.error('Location error:', err);
    }
  };

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  const toggleTemperatureUnit = () => {
    const newUnit = isCelsius ? 'fahrenheit' : 'celsius';
    setIsCelsius(!isCelsius);
    updatePreferences({ temperatureUnit: newUnit });
  };

  const handlePreferencesSave = (newPreferences: any) => {
    updatePreferences(newPreferences);
  };

  const generateOutfitText = (weatherData: any, userPrefs: any) => {
    const temp = weatherData.temperature;
    const condition = weatherData.condition.toLowerCase();
    const styles = userPrefs?.clothingStyles || ['casual'];
    
    let outfit = '';
    
    if (temp <= 5) {
      outfit = 'Wear a heavy winter coat, warm layers, gloves, and a hat.';
    } else if (temp <= 15) {
      outfit = 'A warm jacket or hoodie with jeans would be perfect.';
    } else if (temp <= 25) {
      outfit = 'A light sweater or long-sleeve shirt with comfortable pants.';
    } else {
      outfit = 'Light clothing like a t-shirt and shorts would be comfortable.';
    }
    
    if (styles.includes('formal')) {
      outfit = outfit.replace('hoodie', 'blazer').replace('t-shirt', 'dress shirt');
    }
    
    return outfit;
  };

  const displayError = error || locationError;
  const outfitRecommendation = weather ? generateOutfitText(weather, preferences) : '';

  return (
    <div className={`min-h-screen transition-all duration-500 safe-area-padding ${
      preferences.theme === 'vibrant' 
        ? 'bg-gradient-to-br from-purple-400 via-pink-500 to-red-400 dark:from-purple-900 dark:via-pink-800 dark:to-red-700'
        : preferences.theme === 'nature'
        ? 'bg-gradient-to-br from-green-400 via-teal-500 to-blue-400 dark:from-green-900 dark:via-teal-800 dark:to-blue-700'
        : preferences.theme === 'sunset'
        ? 'bg-gradient-to-br from-orange-400 via-red-500 to-pink-400 dark:from-orange-900 dark:via-red-800 dark:to-pink-700'
        : preferences.theme === 'minimal'
        ? 'bg-gradient-to-br from-gray-400 via-gray-500 to-gray-600 dark:from-gray-800 dark:via-gray-900 dark:to-black'
        : 'bg-gradient-to-br from-blue-400 via-blue-500 to-gray-300 dark:from-gray-900 dark:via-gray-800 dark:to-gray-700'
    }`}>
      <Header isDarkMode={isDarkMode} toggleDarkMode={toggleDarkMode} />
      
      {/* Offline Indicator */}
      {isOffline && (
        <div className="bg-yellow-500 text-white px-4 py-2 text-center text-sm flex items-center justify-center gap-2 no-print">
          <WifiOff className="w-4 h-4" />
          {t('offlineMessage')}
        </div>
      )}
      
      <main className="container mx-auto px-4 py-4 sm:py-8">
        <div className="space-y-8">
          <div className="text-center mb-6 sm:mb-8">
            <h2 className="text-2xl sm:text-3xl md:text-4xl font-bold text-white mb-2">
              Weather & Outfit Advisor
            </h2>
            <p className="text-blue-100 text-base sm:text-lg px-4">
              Get personalized outfit recommendations based on current weather
            </p>
            <button
              onClick={() => setShowPreferences(true)}
              className="mt-4 inline-flex items-center gap-2 px-4 py-2 bg-white/20 hover:bg-white/30 text-white rounded-lg transition-colors duration-200 touch-target"
            >
              <Settings className="w-4 h-4" />
              {t('preferences')}
            </button>
          </div>

          {/* Weather Alerts */}
          {alerts.length > 0 && (
            <div className="px-2 sm:px-0">
              <WeatherAlerts alerts={alerts} onDismiss={dismissAlert} />
            </div>
          )}

          <div className="px-2 sm:px-0">
            <CityInputForm
              onCitySubmit={handleCitySubmit}
              onLocationRequest={handleLocationRequest}
              isLoading={isLoading || locationLoading}
              error={displayError}
            />
          </div>

          {weather && (
            <div className="space-y-4 sm:space-y-6 px-2 sm:px-0">
              <div className="animate-fade-in">
                <WeatherDisplay
                  weather={weather}
                  isCelsius={isCelsius}
                  onToggleUnit={toggleTemperatureUnit}
                />
              </div>
              
              <div className="animate-fade-in">
                <OutfitRecommendation
                  weather={weather}
                  isCelsius={isCelsius}
                  preferences={preferences}
                  wardrobeItems={wardrobeItems}
                  onManageWardrobe={() => setShowWardrobeManager(true)}
                />
              </div>
              
              <div className="animate-fade-in">
                <ActivitySuggestions
                  weather={weather}
                  isCelsius={isCelsius}
                />
              </div>
              
              {forecast.length > 0 && (
                <div className="animate-fade-in">
                  <WeatherForecast
                    forecast={forecast}
                    isCelsius={isCelsius}
                    wardrobeItems={wardrobeItems}
                  />
                </div>
              )}
            </div>
          )}
        </div>
      </main>

      <Footer weather={weather} outfit={outfitRecommendation} isCelsius={isCelsius} />
      
      <UserPreferences
        isOpen={showPreferences}
        onClose={() => setShowPreferences(false)}
        preferences={preferences}
        onSave={handlePreferencesSave}
      />
      
      <WardrobeManager
        isOpen={showWardrobeManager}
        onClose={() => setShowWardrobeManager(false)}
        onWardrobeUpdate={updateWardrobeItems}
      />
    </div>
  );
}

export default App;

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\index.css ===
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  box-sizing: border-box;
}

body {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
  margin: 0;
  padding: 0;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-tap-highlight-color: transparent;
  touch-action: manipulation;
  overscroll-behavior: none;
}

/* Prevent zoom on input focus on iOS */
@media screen and (max-width: 768px) {
  input[type="text"],
  input[type="search"],
  input[type="email"],
  input[type="number"],
  textarea,
  select {
    font-size: 16px !important;
  }
}

/* Custom animations */
@keyframes fade-in {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes pulse-soft {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.8;
  }
}

.animate-fade-in {
  animation: fade-in 0.6s ease-out;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-pulse-soft {
  animation: pulse-soft 2s ease-in-out infinite;
}

/* Custom scrollbar */
::-webkit-scrollbar {
  width: 6px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: rgba(59, 130, 246, 0.5);
  border-radius: 3px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(59, 130, 246, 0.7);
}

/* Touch targets for better mobile accessibility */
@media (max-width: 768px) {
  button {
    min-height: 44px;
    min-width: 44px;
    padding: 12px 16px;
  }
  
  input[type="text"], input[type="search"] {
    min-height: 44px;
    padding: 12px 16px;
  }
  
  /* Larger touch targets for mobile */
  .touch-target {
    min-height: 48px;
    min-width: 48px;
  }
}

/* Focus styles for accessibility */
button:focus,
input:focus {
  outline: 2px solid #3B82F6;
  outline-offset: 2px;
}

/* Remove focus outline for mouse users */
button:focus:not(:focus-visible),
input:focus:not(:focus-visible) {
  outline: none;
}

/* PWA display adjustments */
@media (display-mode: standalone) {
  body {
    user-select: none;
    -webkit-user-select: none;
    -webkit-touch-callout: none;
  }
  
  .container {
    padding-top: env(safe-area-inset-top);
    padding-bottom: env(safe-area-inset-bottom);
    padding-left: env(safe-area-inset-left);
    padding-right: env(safe-area-inset-right);
  }
  
  /* Hide address bar on mobile PWA */
  html {
    height: 100%;
    overflow: hidden;
  }
  
  body {
    height: 100vh;
    overflow-y: auto;
  }
}

/* Mobile-specific optimizations */
@media (max-width: 640px) {
  .container {
    padding-left: 16px;
    padding-right: 16px;
  }
  
  /* Reduce motion for users who prefer it */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  button {
    border: 2px solid;
  }
  
  .bg-white\/90 {
    background-color: white;
  }
  
  .bg-gray-800\/90 {
    background-color: #1f2937;
  }
}

/* Print styles */
@media print {
  .no-print {
    display: none !important;
  }
  
  body {
    background: white !important;
    color: black !important;
  }
}

/* Loading spinner for better UX */
.loading-spinner {
  border: 2px solid #f3f3f3;
  border-top: 2px solid #3498db;
  border-radius: 50%;
  width: 20px;
  height: 20px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\main.tsx ===
import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App.tsx';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src\vite-env.d.ts ===
/// <reference types="vite/client" />


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\public ===
[Error reading file]: [Errno 13] Permission denied: 'C:\\Users\\Dell\\Downloads\\project-bolt-sb1-dbc7xrpk (1)\\project\\public'

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\public\manifest.json ===
{
  "name": "Smart Weather + Outfit Recommender",
  "short_name": "WeatherOutfit",
  "description": "Get weather information and AI-powered outfit recommendations",
  "start_url": "/",
  "display": "standalone",
  "display_override": ["window-controls-overlay", "standalone", "minimal-ui"],
  "background_color": "#4B9CEA",
  "theme_color": "#4B9CEA",
  "orientation": "portrait-primary",
  "scope": "/",
  "lang": "en",
  "dir": "ltr",
  "icons": [
    {
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
      "sizes": "72x72",
      "type": "image/svg+xml",
      "purpose": "any"
    },
    {
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
      "sizes": "96x96",
      "type": "image/svg+xml",
      "purpose": "any"
    },
    {
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
      "sizes": "128x128",
      "type": "image/svg+xml",
      "purpose": "any"
    },
    {
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
      "sizes": "144x144",
      "type": "image/svg+xml",
      "purpose": "any"
    },
    {
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
      "sizes": "152x152",
      "type": "image/svg+xml",
      "purpose": "any"
    },
    {
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
      "sizes": "192x192",
      "type": "image/svg+xml",
      "purpose": "any"
    },
    {
      "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
      "sizes": "384x384",
      "type": "image/svg+xml",
      "purpose": "any"
      "sizes": "512x512",
      "type": "image/svg+xml",
      "purpose": "any maskable"
    }
  ],
  "categories": ["weather", "lifestyle", "utilities"],
  "shortcuts": [
    {
      "name": "Current Weather",
      "short_name": "Weather",
      "description": "Check current weather conditions",
      "url": "/?action=weather",
      "icons": [
        {
          "src": "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E",
          "sizes": "96x96"
        }
      ]
    }
  ],
  "prefer_related_applications": false
}

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\public\sw.js ===
const CACHE_NAME = 'weather-outfit-v3';
const urlsToCache = [
  '/',
  '/manifest.json',
  '/index.html',
  '/src/main.tsx',
  '/src/index.css'
];

// Cache API responses
const API_CACHE_NAME = 'weather-api-cache-v2';
const API_CACHE_TIME = 30 * 60 * 1000; // 30 minutes

// Install event
self.addEventListener('install', (event) => {
  console.log('Service Worker installing...');
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Caching app shell');
        return cache.addAll(urlsToCache);
      })
      .then(() => self.skipWaiting())
  );
});

// Activate event
self.addEventListener('activate', (event) => {
  console.log('Service Worker activating...');
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME && cacheName !== API_CACHE_NAME) {
            console.log('Deleting old cache:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => self.clients.claim())
  );
});

// Fetch event
self.addEventListener('fetch', (event) => {
  // Handle API requests differently
  if (event.request.url.includes('openweathermap.org')) {
    event.respondWith(
      caches.open(API_CACHE_NAME).then((cache) => {
        return cache.match(event.request).then((cachedResponse) => {
          if (cachedResponse) {
            const cachedTime = new Date(cachedResponse.headers.get('cached-time'));
            const now = new Date();
            
            // Return cached response if it's still fresh
            if (now.getTime() - cachedTime.getTime() < API_CACHE_TIME) {
              console.log('Serving cached API response');
              return cachedResponse;
            }
          }
          
          // Fetch fresh data
          console.log('Fetching fresh API data');
          return fetch(event.request).then((response) => {
            if (response.status === 200) {
              const responseClone = response.clone();
              const headers = new Headers(responseClone.headers);
              headers.append('cached-time', new Date().toISOString());
              
              const modifiedResponse = new Response(responseClone.body, {
                status: responseClone.status,
                statusText: responseClone.statusText,
                headers: headers
              });
              
              cache.put(event.request, modifiedResponse.clone());
              return response;
            }
            return response;
          }).catch(() => {
            // Return cached response if network fails
            console.log('Network failed, serving cached response');
            return cachedResponse || new Response('Offline', { status: 503 });
          });
        });
      })
    );
    return;
  }

  // Handle other requests normally
  event.respondWith(
    caches.match(event.request).then((response) => {
      // Return cached version or fetch from network
      return response || fetch(event.request).catch(() => {
        // If both cache and network fail, return offline page for navigation requests
        if (event.request.mode === 'navigate') {
          return caches.match('/');
        }
      });
    })
  );
});

// Background sync for offline actions
self.addEventListener('sync', (event) => {
  if (event.tag === 'background-sync') {
    console.log('Background sync triggered');
    // Handle background sync tasks
  }
});

// Push notifications (for future weather alerts)
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body,
      icon: '/manifest.json',
      badge: '/manifest.json',
      vibrate: [100, 50, 100],
      data: {
        dateOfArrival: Date.now(),
        primaryKey: 1
      }
    };
    
    event.waitUntil(
      self.registration.showNotification(data.title, options)
    );
  }
});

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\src ===
[Error reading file]: [Errno 13] Permission denied: 'C:\\Users\\Dell\\Downloads\\project-bolt-sb1-dbc7xrpk (1)\\project\\src'

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\.env ===
VITE_OPENWEATHER_API_KEY=014fec516704b8cdae6ca61db8e3622c
VITE_OPENWEATHER_BASE_URL=https://api.openweathermap.org/data/2.5

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\.gitignore ===
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
.env


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\eslint.config.js ===
import js from '@eslint/js';
import globals from 'globals';
import reactHooks from 'eslint-plugin-react-hooks';
import reactRefresh from 'eslint-plugin-react-refresh';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
      '@typescript-eslint/no-unused-vars': ['warn', { 
        argsIgnorePattern: '^_',
        varsIgnorePattern: '^_',
        ignoreRestSiblings: true 
      }],
      '@typescript-eslint/no-explicit-any': 'warn',
      'react-hooks/exhaustive-deps': 'warn',
    },
  }
);


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\index.html ===
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover, user-scalable=no" />
    <meta name="theme-color" content="#4B9CEA" />
    <meta name="theme-color" media="(prefers-color-scheme: dark)" content="#374151" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent" />
    <meta name="apple-mobile-web-app-title" content="WeatherOutfit" />
    <meta name="mobile-web-app-capable" content="yes" />
    <meta name="application-name" content="WeatherOutfit" />
    <meta name="msapplication-TileColor" content="#4B9CEA" />
    <meta name="msapplication-tap-highlight" content="no" />
    <meta name="description" content="Get weather information and AI-powered outfit recommendations" />
    <meta name="keywords" content="weather, outfit, recommendation, clothing, forecast, PWA" />
    <meta name="author" content="Weather Outfit App" />
    
    <!-- PWA manifest -->
    <link rel="manifest" href="/manifest.json" />
    
    <!-- Apple touch icons -->
    <link rel="apple-touch-icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E" />
    <link rel="apple-touch-icon" sizes="152x152" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E" />
    <link rel="apple-touch-icon" sizes="180x180" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E" />
    
    <!-- Microsoft tiles -->
    <meta name="msapplication-TileImage" content="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'%3E%3Ccircle cx='50' cy='50' r='40' fill='%234B9CEA'/%3E%3Ctext x='50' y='60' text-anchor='middle' fill='white' font-size='40' font-family='Arial'%3E‚òÄ%3C/text%3E%3C/svg%3E" />
    
    <!-- Preload critical resources -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="preconnect" href="https://api.openweathermap.org" />
    
    <title>Smart Weather + Outfit Recommender</title>
  </head>
  <body>
    <div id="root"></div>
    <noscript>
      <div style="text-align: center; padding: 50px; font-family: Arial, sans-serif;">
        <h1>JavaScript Required</h1>
        <p>This application requires JavaScript to function properly. Please enable JavaScript in your browser.</p>
      </div>
    </noscript>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\package.json ===
{
  "name": "vite-react-typescript-starter",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "caniuse-lite": "^1.0.30001727",
    "lucide-react": "^0.344.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.9.1",
    "@types/react": "^18.3.5",
    "@types/react-dom": "^18.3.0",
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.18",
    "eslint": "^9.9.1",
    "eslint-plugin-react-hooks": "^5.1.0-rc.0",
    "eslint-plugin-react-refresh": "^0.4.11",
    "globals": "^15.9.0",
    "postcss": "^8.4.35",
    "tailwindcss": "^3.4.1",
    "typescript": "^5.5.4",
    "typescript-eslint": "^8.3.0",
    "vite": "^5.4.2"
  }
}


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\postcss.config.js ===
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\tailwind.config.js ===
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
  darkMode: 'class',
  theme: {
    extend: {
      spacing: {
        'safe-top': 'env(safe-area-inset-top)',
        'safe-bottom': 'env(safe-area-inset-bottom)',
        'safe-left': 'env(safe-area-inset-left)',
        'safe-right': 'env(safe-area-inset-right)',
      },
      screens: {
        'xs': '475px',
        'standalone': { 'raw': '(display-mode: standalone)' },
      },
      fontFamily: {
        'sans': ['Inter', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'sans-serif'],
      },
      colors: {
        'soft-blue': '#4B9CEA',
        'warm-gray': '#E5E7EB',
        'dark-gray': '#374151',
        'sunny-yellow': '#FBBF24',
        'cool-teal': '#2DD4BF',
      },
      animation: {
        'fade-in': 'fadeIn 0.6s ease-out',
        'slide-up': 'slideUp 0.3s ease-out',
        'pulse-soft': 'pulseSoft 2s ease-in-out infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0', transform: 'translateY(20px)' },
          '100%': { opacity: '1', transform: 'translateY(0)' },
        },
        slideUp: {
          '0%': { transform: 'translateY(100%)' },
          '100%': { transform: 'translateY(0)' },
        },
        pulseSoft: {
          '0%, 100%': { opacity: '1' },
          '50%': { opacity: '0.8' },
        },
      },
    },
  },
  plugins: [],
};


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\tsconfig.app.json ===
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"]
}


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\tsconfig.json ===
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\tsconfig.node.json ===
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}


=== File: C:\Users\Dell\Downloads\project-bolt-sb1-dbc7xrpk (1)\project\vite.config.ts ===
import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    host: true,
    port: 5173,
  },
  build: {
    target: 'es2015',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          icons: ['lucide-react'],
        },
      },
    },
  },
  optimizeDeps: {
    exclude: ['lucide-react'],
  },
  define: {
    __APP_VERSION__: JSON.stringify(process.env.npm_package_version),
  },
});
